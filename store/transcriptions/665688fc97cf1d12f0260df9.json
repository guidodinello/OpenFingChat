[
    {
        "text": " Bueno, vamos a estar introduciendo la segunda parte del curso.",
        "start": 0.0,
        "end": 5.0
    },
    {
        "text": " Está bien.",
        "start": 5.0,
        "end": 6.0
    },
    {
        "text": " Que van a ver que, por lo menos hoy no va a tener tanta novedad en sí,",
        "start": 6.0,
        "end": 10.0
    },
    {
        "text": " pero le va a dar un contexto metodológico y formal a cómo vienen trabajando en el laboratorio.",
        "start": 10.0,
        "end": 15.0
    },
    {
        "text": " Está bien. Para ver hacia dónde es que estamos encaminando la programación ya en esta segunda parte del curso.",
        "start": 15.0,
        "end": 21.0
    },
    {
        "text": " Entonces, vamos a dar una introducción a estos tipos hasta acto de datos,",
        "start": 21.0,
        "end": 24.0
    },
    {
        "text": " lo que vamos a llamar módulos, sus tipos de datos.",
        "start": 24.0,
        "end": 27.0
    },
    {
        "text": " Está bien. Y introduciéndolo con tres variantes más conocidas,",
        "start": 28.0,
        "end": 31.0
    },
    {
        "text": " que son variantes de cosas que ya hemos venido trabajando, como la emocion de lista, pila y cole.",
        "start": 31.0,
        "end": 36.0
    },
    {
        "text": " Entonces, este es el esquema que nos va a guiar un poco en esta segunda parte del curso.",
        "start": 36.0,
        "end": 41.0
    },
    {
        "text": " Tres componentes aparecen en este dibujo, o sea, cuando uno hace estas aplicaciones que están acá,",
        "start": 41.0,
        "end": 48.0
    },
    {
        "text": " piensen aplicaciones grandes, sistemas grandes, ejían los hace modulares.",
        "start": 48.0,
        "end": 53.0
    },
    {
        "text": " Por ejemplo, uso una lista para la lista de espera de un vuelo, para los productos,",
        "start": 54.0,
        "end": 61.0
    },
    {
        "text": " una pila, una estáctea, una conjunto, o sea, una colección de información.",
        "start": 61.0,
        "end": 66.0
    },
    {
        "text": " La voy a, de alguna manera, descomponer el módulo. ¿Qué son estos módulos? Esto que vamos a llamar tipos de datos.",
        "start": 66.0,
        "end": 72.0
    },
    {
        "text": " Un tipo de datos vamos a separar lo que es la especificación del tipo de datos,",
        "start": 72.0,
        "end": 77.0
    },
    {
        "text": " de lo que son las posibles implementaciones de ese tipo de datos.",
        "start": 77.0,
        "end": 82.0
    },
    {
        "text": " Para ilustrar, voy a arrancar con una idea de lista, si este tipo de datos fuera una lista y variantes de lista,",
        "start": 83.0,
        "end": 89.0
    },
    {
        "text": " incluso como podrían ser distintas implementaciones para esa lista,",
        "start": 89.0,
        "end": 94.0
    },
    {
        "text": " pero de tal manera que la aplicación que usa la inocion de lista según esta especificación,",
        "start": 94.0,
        "end": 98.0
    },
    {
        "text": " que se suele llamar también contrato, o interfaz,",
        "start": 98.0,
        "end": 105.0
    },
    {
        "text": " eso es otra forma de verlo según el paradigma, en paradigma de objetos,",
        "start": 105.0,
        "end": 108.0
    },
    {
        "text": " o sea, se le llama más interfaz, que la aplicación se independiente a cómo está implementado.",
        "start": 109.0,
        "end": 114.0
    },
    {
        "text": " De tal manera que yo después, si tengo una aplicación que usa un módulo pila,",
        "start": 114.0,
        "end": 119.0
    },
    {
        "text": " que está implementado con una regla, después lo quiero cambiar con una lista,",
        "start": 119.0,
        "end": 123.0
    },
    {
        "text": " para la aplicación no lleve a ser más cambios, que decir,",
        "start": 123.0,
        "end": 127.0
    },
    {
        "text": " en vez de incluir este módulo, incluyo este, pero como los dos respetan el mismo contrato,",
        "start": 127.0,
        "end": 131.0
    },
    {
        "text": " la aplicación sigue funcionando.",
        "start": 131.0,
        "end": 133.0
    },
    {
        "text": " Ese es un poco la idea, pregunta, ¿por qué puede haber distintas implementaciones",
        "start": 133.0,
        "end": 138.0
    },
    {
        "text": " de un mismo contrato de una misma especificación? ¿En qué se pueden diferenciar?",
        "start": 138.0,
        "end": 142.0
    },
    {
        "text": " Especializar en cosas distintas no pueden ser,",
        "start": 145.0,
        "end": 148.0
    },
    {
        "text": " porque lo que hace, la ocada operación va a estar da en la especificación,",
        "start": 148.0,
        "end": 153.0
    },
    {
        "text": " no puede innovar una implementación respecto a otra, ¿a qué hago? ¿Vale bien?",
        "start": 153.0,
        "end": 159.0
    },
    {
        "text": " Es salto. Entonces, en lo que se pueden diferenciar,",
        "start": 164.0,
        "end": 168.0
    },
    {
        "text": " o pueden diferenciar las implementaciones de un mismo contrato,",
        "start": 168.0,
        "end": 172.0
    },
    {
        "text": " no es en la funcionalidad en que hagan cosas distintas.",
        "start": 172.0,
        "end": 175.0
    },
    {
        "text": " Tiene que hacer lo mismo, porque si no, sería mentira que yo puedo cambiar",
        "start": 175.0,
        "end": 179.0
    },
    {
        "text": " una implementación por otra y la aplicación sigue funcionando con la misma lógica.",
        "start": 179.0,
        "end": 184.0
    },
    {
        "text": " En lo que sí puede cambiar, en lo que dice él, en la eficiencia,",
        "start": 184.0,
        "end": 187.0
    },
    {
        "text": " puede ser que quizás usaré esta, a la que consuma más memoria que ésta,",
        "start": 188.0,
        "end": 193.0
    },
    {
        "text": " entonces, cambio por ésta, o que el tiempo de ejecución en algún implementación",
        "start": 193.0,
        "end": 196.0
    },
    {
        "text": " es más rápido, entonces para esa aplicación, en este momento me conviene",
        "start": 196.0,
        "end": 200.0
    },
    {
        "text": " más una implementación que otra, sí.",
        "start": 200.0,
        "end": 202.0
    },
    {
        "text": " Puede ser, puede ser, pero de alguna manera no va a ser como el factor",
        "start": 206.0,
        "end": 209.0
    },
    {
        "text": " más importante de la claridad del código, sino más bien,",
        "start": 209.0,
        "end": 211.0
    },
    {
        "text": " de alguna manera van a distinguir en aspectos más bien de eficiencia,",
        "start": 211.0,
        "end": 215.0
    },
    {
        "text": " no de funcionalidad.",
        "start": 215.0,
        "end": 217.0
    },
    {
        "text": " Entonces para el usted un poquito de cosas que aparecen en distintos niveles",
        "start": 217.0,
        "end": 221.0
    },
    {
        "text": " de ese dibujito, voy a arrancar con la noción de lista,",
        "start": 221.0,
        "end": 224.0
    },
    {
        "text": " pero rápidamente me voy a pasar a las variantes que son la pila y la cola.",
        "start": 224.0,
        "end": 227.0
    },
    {
        "text": " Primera observación, cuando uno define un tipo inductivo como la lista,",
        "start": 228.0,
        "end": 231.0
    },
    {
        "text": " vieron que definíamos como regla, como en lógica, un tipo inductivo a través de reglas.",
        "start": 231.0,
        "end": 236.0
    },
    {
        "text": " Las operaciones de esa regla, por ejemplo, la que genera lista vacía o la que agrega",
        "start": 236.0,
        "end": 241.0
    },
    {
        "text": " un elemento del comienzo de una lista como reglas, son operaciones que",
        "start": 241.0,
        "end": 244.0
    },
    {
        "text": " ya podría incluir en la especificación. De hecho, se suelen llamar operaciones constructoras,",
        "start": 244.0,
        "end": 249.0
    },
    {
        "text": " porque si cada una de esas reglas que uno pone en la notación de lógica,",
        "start": 249.0,
        "end": 253.0
    },
    {
        "text": " permite generar todas las listas, entonces yo quiero tener esas operaciones",
        "start": 253.0,
        "end": 258.0
    },
    {
        "text": " en el modo de lista para asegurarme que cualquier lista la puedo construir,",
        "start": 258.0,
        "end": 261.0
    },
    {
        "text": " por eso de manera operaciones constructoras.",
        "start": 261.0,
        "end": 263.0
    },
    {
        "text": " Entonces, esa es una primera cosa, cuando uno define, quiere definir un nuevo tipo de datos,",
        "start": 263.0,
        "end": 268.0
    },
    {
        "text": " un tipo inductivo, cada regla de ese tipo inductivo podría",
        "start": 268.0,
        "end": 273.0
    },
    {
        "text": " ser una operación en esa especificación. Como va a ser una operación que permite construir,",
        "start": 273.0,
        "end": 279.0
    },
    {
        "text": " una constructora, la primera genera, la lista vacía y la segunda podrá",
        "start": 279.0,
        "end": 284.0
    },
    {
        "text": " merecir agrega un elemento una lista.",
        "start": 284.0,
        "end": 286.0
    },
    {
        "text": " Bien, es por eso que yo le puse te dibujito, ¿qué operaciones va a tener una especificación?",
        "start": 289.0,
        "end": 294.0
    },
    {
        "text": " Quizás hasta ahora no le habíamos puesto el énfasis, pero ustedes ya reciben",
        "start": 294.0,
        "end": 298.0
    },
    {
        "text": " especificaciones en el laboratorio, los punto H.",
        "start": 298.0,
        "end": 302.0
    },
    {
        "text": " También, son las interfaces, los contratos que ustedes tienen que implementar.",
        "start": 302.0,
        "end": 306.0
    },
    {
        "text": " Hay una secuencia de operaciones que son las que nosotros queremos que ustedes",
        "start": 306.0,
        "end": 310.0
    },
    {
        "text": " simplemente. Ahora, cuando uno piensa en un módulo, digamos,",
        "start": 310.0,
        "end": 314.0
    },
    {
        "text": " un tipo de Australia, no cualquier operación tiene sentido.",
        "start": 314.0,
        "end": 319.0
    },
    {
        "text": " Entonces, va a haber categoría de operaciones que sí o sí,",
        "start": 319.0,
        "end": 322.0
    },
    {
        "text": " tienen que estar en un módulo un tipo de datos cuando yo lo creo.",
        "start": 322.0,
        "end": 325.0
    },
    {
        "text": " ¿Por qué? Porque yo me aseguro que si pongo esa categoría de operaciones,",
        "start": 325.0,
        "end": 329.0
    },
    {
        "text": " todas cualquier operación en las poder soler a partir de estas.",
        "start": 329.0,
        "end": 332.0
    },
    {
        "text": " Es decir, que esas son suficientes, son mínimas, son completas.",
        "start": 332.0,
        "end": 337.0
    },
    {
        "text": " Entonces, ahí aparecen las constructoras que en este dibujito yo le expongo como",
        "start": 337.0,
        "end": 341.0
    },
    {
        "text": " si esta cajita fuera el tipo de datos que voy a crear una lista,",
        "start": 341.0,
        "end": 344.0
    },
    {
        "text": " la noción de todas las listas, por ejemplo, digo, bueno,",
        "start": 344.0,
        "end": 347.0
    },
    {
        "text": " las constructoras es como que me dicen cómo creo elementos de esta cajita,",
        "start": 347.0,
        "end": 351.0
    },
    {
        "text": " cómo creo todas las listas. Yo no podría decir,",
        "start": 351.0,
        "end": 353.0
    },
    {
        "text": " una operación que crea la lista vacía y una que al menos agrega un elemento",
        "start": 353.0,
        "end": 357.0
    },
    {
        "text": " en la lista. Entonces, cualquier lista de cualquier largo,",
        "start": 357.0,
        "end": 360.0
    },
    {
        "text": " con esas dolas, va a poder crear.",
        "start": 360.0,
        "end": 362.0
    },
    {
        "text": " Las selectoras o destructoras, y a veces se las engloba como la misma categoría,",
        "start": 362.0,
        "end": 367.0
    },
    {
        "text": " fíjense en la flechita de la cajita están como al revés, están como saliendo.",
        "start": 367.0,
        "end": 371.0
    },
    {
        "text": " Es decir, seleccionan, diciendo si yo ya tengo una lista,",
        "start": 371.0,
        "end": 374.0
    },
    {
        "text": " ¿qué puedo obtener de ahí?",
        "start": 374.0,
        "end": 377.0
    },
    {
        "text": " Bien, mientras que la constructora dice cómo genero listas.",
        "start": 377.0,
        "end": 380.0
    },
    {
        "text": " Las puedo pensar como inversas. Es decir, que si yo pienso que una forma de construir",
        "start": 380.0,
        "end": 384.0
    },
    {
        "text": " es agregar un elemento en la lista, cuando piensen las selectoras,",
        "start": 384.0,
        "end": 388.0
    },
    {
        "text": " voy a pensar en operaciones de cómo saca un elemento en la lista,",
        "start": 388.0,
        "end": 392.0
    },
    {
        "text": " cómo obtengo, cómo lo borro.",
        "start": 392.0,
        "end": 396.0
    },
    {
        "text": " Ahora bien, no siempre voy a poder sacar información en la lista,",
        "start": 396.0,
        "end": 399.0
    },
    {
        "text": " porque por ejemplo, si yo tengo una lista o una pila,",
        "start": 399.0,
        "end": 402.0
    },
    {
        "text": " una lista, digo, tengo una operación que retorno el primer elemento en la lista.",
        "start": 402.0,
        "end": 407.0
    },
    {
        "text": " Siempre puede, para cualquier lista retorno el primer elemento,",
        "start": 407.0,
        "end": 412.0
    },
    {
        "text": " voy a decir, no, ¿por qué?",
        "start": 413.0,
        "end": 415.0
    },
    {
        "text": " Exacto.",
        "start": 415.0,
        "end": 417.0
    },
    {
        "text": " Ahí no voy a poder retornar un elemento, tengo un invento en el elemento,",
        "start": 417.0,
        "end": 420.0
    },
    {
        "text": " entonces, se le parece en los predicados, como la tercera categoría",
        "start": 420.0,
        "end": 424.0
    },
    {
        "text": " en cualquier especificación son los predicados.",
        "start": 424.0,
        "end": 427.0
    },
    {
        "text": " Los predicados, como funciones bulianas, me permite decir",
        "start": 427.0,
        "end": 430.0
    },
    {
        "text": " cuando puedo, no puedo hacer algo.",
        "start": 430.0,
        "end": 432.0
    },
    {
        "text": " Entonces, típicamente están para justamente las condiciones que hay una llamaria",
        "start": 432.0,
        "end": 436.0
    },
    {
        "text": " las precondiciones. Esa operación, también, que obtiene el primer elemento",
        "start": 436.0,
        "end": 440.0
    },
    {
        "text": " en el sistema, no deberías tener una precondición que la lista no se vacía,",
        "start": 440.0,
        "end": 443.0
    },
    {
        "text": " porque no puedo retornar algo que es vacía.",
        "start": 443.0,
        "end": 446.0
    },
    {
        "text": " Es decir, ¿por qué no puedo retornar? Es más, quiero que les quede bien claro",
        "start": 446.0,
        "end": 450.0
    },
    {
        "text": " en este dibujito porque no pueden, porque si yo voy a trabajar a nivel de especificación",
        "start": 450.0,
        "end": 455.0
    },
    {
        "text": " con la aplicación y no quiero que se entere de la implementación,",
        "start": 455.0,
        "end": 459.0
    },
    {
        "text": " porque entonces yo puedo cambiar implementaciones y sigue funcionando.",
        "start": 459.0,
        "end": 462.0
    },
    {
        "text": " Cuando yo digo, dame el primer elemento en la lista, si la lista es vacía,",
        "start": 462.0,
        "end": 465.0
    },
    {
        "text": " ni siquiera puedo ir a mirar la lista o el arreglo o lo que yo tenga acá,",
        "start": 465.0,
        "end": 468.0
    },
    {
        "text": " porque de alguna manera eso no existe a nivel de especificación.",
        "start": 468.0,
        "end": 471.0
    },
    {
        "text": " Si ni siquiera tengo esa información, no puedo hacer ni trampa, digamos.",
        "start": 471.0,
        "end": 475.0
    },
    {
        "text": " Se entiende? Entonces, de alguna manera por eso es que uno incluye",
        "start": 475.0,
        "end": 480.0
    },
    {
        "text": " en los contratos las predicados. Y crea de me que con esto hay cansa.",
        "start": 480.0,
        "end": 485.0
    },
    {
        "text": " Por lo deciría, yo cuando voy a crear un modelo como una cajita,",
        "start": 485.0,
        "end": 488.0
    },
    {
        "text": " digo cómo meto cosas en la cajita, constructoras, como saco cosas de la cajita",
        "start": 488.0,
        "end": 493.0
    },
    {
        "text": " o como siempre puedo sacar pongo predicados.",
        "start": 493.0,
        "end": 496.0
    },
    {
        "text": " En la pronunciación de todos objetos es lo que se llama los set,",
        "start": 496.0,
        "end": 500.0
    },
    {
        "text": " cargar los valores en los atributos y los get obtener los valores en la atribut.",
        "start": 500.0,
        "end": 505.0
    },
    {
        "text": " Para que cuando hacen a P4 vean que estos conceptos aparecen también",
        "start": 505.0,
        "end": 509.0
    },
    {
        "text": " en otros paradigles. Ahora bien, no hay una única posible especificación",
        "start": 509.0,
        "end": 515.0
    },
    {
        "text": " de lista o de cualquier tada. Y porque pues yo dije la operación que agregue",
        "start": 515.0,
        "end": 519.0
    },
    {
        "text": " un elemento en la lista, donde lo agrega. Por ejemplo,",
        "start": 519.0,
        "end": 522.0
    },
    {
        "text": " yo podría ser que lo agregue al comienzo de la lista o lo agregue al final.",
        "start": 522.0,
        "end": 526.0
    },
    {
        "text": " Cuando yo especifico digo eso como en la postcondición, digo lo agrega al principio",
        "start": 526.0,
        "end": 531.0
    },
    {
        "text": " o sea lo que no llamaría una posición fija. Otro podría ser que la posición",
        "start": 531.0,
        "end": 536.0
    },
    {
        "text": " se un parámetro, un n. Entonces, lo agregue la posición n de la lista.",
        "start": 536.0,
        "end": 541.0
    },
    {
        "text": " Se suele llamar listas indizadas por posiciones. O podría ser lo agrega",
        "start": 541.0,
        "end": 546.0
    },
    {
        "text": " en una posición corriente o actual, donde esté esparado y existe la nación",
        "start": 546.0,
        "end": 550.0
    },
    {
        "text": " como de un cursor, agrega lo ahí. Yo iba a mostrar los dos ejemplos de posiciones",
        "start": 550.0,
        "end": 555.0
    },
    {
        "text": " explícitas, como parámetros de posición implícita, donde estás parado.",
        "start": 555.0,
        "end": 560.0
    },
    {
        "text": " Como si fuera piensenlo así, un editor de texto, donde uno está parado",
        "start": 560.0,
        "end": 564.0
    },
    {
        "text": " hace algo, en un file system, cuando uno dice va a ser una acción",
        "start": 564.0,
        "end": 568.0
    },
    {
        "text": " en la estructura de carpetas de un sistema operativo, es donde está parado",
        "start": 568.0,
        "end": 572.0
    },
    {
        "text": " el directorio actual que le suele llamar, la carpeta actual.",
        "start": 572.0,
        "end": 575.0
    },
    {
        "text": " Entonces, aparece la nación de actual. También puede ser que yo",
        "start": 575.0,
        "end": 579.0
    },
    {
        "text": " agregue, como dije, otra forma de manera ordenada y tengo listas ordenadas.",
        "start": 579.0,
        "end": 583.0
    },
    {
        "text": " Es decir, tengo criterio y eso me lleva a distintos pequeñas variantes",
        "start": 583.0,
        "end": 587.0
    },
    {
        "text": " del contrato, pues ya cambiando la semántica de cómo agregar",
        "start": 587.0,
        "end": 592.0
    },
    {
        "text": " son distintos contratos. Las aplicaciones que lo usen tienen que saber",
        "start": 592.0,
        "end": 595.0
    },
    {
        "text": " que cuando se amenúen a ser, va a ser cosas distintas dependiendo de lo que le ponga",
        "start": 595.0,
        "end": 599.0
    },
    {
        "text": " acá. Entonces, no hay una única forma de este billeto.",
        "start": 599.0,
        "end": 604.0
    },
    {
        "text": " Un ejemplo que aparece en el práctico que tiene que ver con este tema,",
        "start": 604.0,
        "end": 608.0
    },
    {
        "text": " lo que llamamos listas indizadas no acotadas. ¿Qué trataría de uno",
        "start": 608.0,
        "end": 613.0
    },
    {
        "text": " de simular con este modelo? Es como si piensenla asina, como si quisiera",
        "start": 613.0,
        "end": 616.0
    },
    {
        "text": " tener un arreglo por posiciones, pero que sea arreglo no tuviera límites.",
        "start": 616.0,
        "end": 621.0
    },
    {
        "text": " Una lista posiblemente infinita, donde yo puedo insertar, buscar,",
        "start": 621.0,
        "end": 626.0
    },
    {
        "text": " borrar un elemento en una posición. ¿Se entiende? Es decir, yo podría",
        "start": 626.0,
        "end": 631.0
    },
    {
        "text": " pensar que quisiera que este modelo fuera como esta noción donde yo",
        "start": 631.0,
        "end": 634.0
    },
    {
        "text": " tengo una secuencia de elementos y yo voy a hacer algo en un parámetro que",
        "start": 634.0,
        "end": 638.0
    },
    {
        "text": " es la posición, por eso me dice indizada, es una posición.",
        "start": 638.0,
        "end": 642.0
    },
    {
        "text": " No acotada, quiere decir que esto de alguna manera no como un arreglo,",
        "start": 642.0,
        "end": 645.0
    },
    {
        "text": " como una estructura de arreglo, que uno le impone un límite cuando hace",
        "start": 645.0,
        "end": 649.0
    },
    {
        "text": " un new o cuando compila y queda fijo. ¿También? ¿Cuál es la función",
        "start": 649.0,
        "end": 654.0
    },
    {
        "text": " que tiene una especificación? La principal función con uno va a ser",
        "start": 654.0,
        "end": 658.0
    },
    {
        "text": " que usted ha recibido los puntos H. Ahora en un momento no dice yo voy",
        "start": 658.0,
        "end": 662.0
    },
    {
        "text": " a hacer un punto H y al final del curso los vamos a capacitar para que",
        "start": 662.0,
        "end": 666.0
    },
    {
        "text": " usted empiece a hacer sus propios diseño o especificaciones sus propios",
        "start": 666.0,
        "end": 670.0
    },
    {
        "text": " puntos H. Supongo que hace que yo quiero trabajar con esta idea.",
        "start": 670.0,
        "end": 673.0
    },
    {
        "text": " Te digo, ¿A on pensar constructores para que usted en el práctico lo",
        "start": 673.0,
        "end": 677.0
    },
    {
        "text": " van a tener dado? Pero acá es como sería, o qué cosas deberían aparecer ahí.",
        "start": 677.0,
        "end": 681.0
    },
    {
        "text": " Y bueno, diría, ¿cómo generó cualquier lista que yo pueda referir",
        "start": 681.0,
        "end": 684.0
    },
    {
        "text": " a las primeras posiciones? Primero generar tu en la lista vacía. ¿Tá?",
        "start": 684.0,
        "end": 689.0
    },
    {
        "text": " Y podría pensar en una operación de insertar un elemento pero en una",
        "start": 689.0,
        "end": 694.0
    },
    {
        "text": " posición N. Ahora, mira el dibujito, ¿qué pasa cuando yo quiero",
        "start": 694.0,
        "end": 698.0
    },
    {
        "text": " insertar un elemento E en una posición N? ¿Qué puede pasar en ese dibujito?",
        "start": 698.0,
        "end": 702.0
    },
    {
        "text": " Con la posición. ¿Qué te ha escrito en el puesto? ¿Qué tenga que?",
        "start": 702.0,
        "end": 709.0
    },
    {
        "text": " ¿Qué tiene esta posición de después? Oudita no se está intentando lo que",
        "start": 709.0,
        "end": 714.0
    },
    {
        "text": " es editar la posición después. Pero ¿qué puede pasar? Voy",
        "start": 714.0,
        "end": 717.0
    },
    {
        "text": " a insertar la lista tiene 10 y quienes atar la posición 5 por ejemplo.",
        "start": 717.0,
        "end": 720.0
    },
    {
        "text": " Una posición 25 ¿eh? ¿Podría pasar que el N sea mayor que el final,",
        "start": 720.0,
        "end": 731.0
    },
    {
        "text": " si la lista tiene 10 posiciones porque el largo es 10 y quienes atar la",
        "start": 731.0,
        "end": 736.0
    },
    {
        "text": " posición 15, la especificación debería decir que hace si es",
        "start": 736.0,
        "end": 740.0
    },
    {
        "text": " un error o que hace y ¿qué pasa si ahora inserto dentro de la posición?",
        "start": 740.0,
        "end": 747.0
    },
    {
        "text": " ¿Eh? Si está ocupada la posición, por ejemplo,",
        "start": 747.0,
        "end": 751.0
    },
    {
        "text": " 15 está la posición está ahí pero ya hay un elemento en esa posición.",
        "start": 751.0,
        "end": 755.0
    },
    {
        "text": " Entonces, cuando yo específico tengo que decir justamente ese criterio,",
        "start": 755.0,
        "end": 758.0
    },
    {
        "text": " sin saber cómo está implementado como si fuera un dibujito o decir cuál",
        "start": 758.0,
        "end": 762.0
    },
    {
        "text": " todo lo posible es comportamiento, prever toda la situación y en esa",
        "start": 762.0,
        "end": 766.0
    },
    {
        "text": " poscondición escribirlo que uno esperaría. ¿Entiende? Para que después la",
        "start": 766.0,
        "end": 770.0
    },
    {
        "text": " aplicación que la use no tenga dudas de cuál va a ser el comportamiento",
        "start": 770.0,
        "end": 773.0
    },
    {
        "text": " de estinsertar. Entonces si uno lee ese texto que está puesto ahí,",
        "start": 773.0,
        "end": 777.0
    },
    {
        "text": " fíjense que hay dos situaciones importantes que es cuando la posición",
        "start": 777.0,
        "end": 781.0
    },
    {
        "text": " N está en el rango de la lista, en el largo de la lista o cuando se sale",
        "start": 781.0,
        "end": 786.0
    },
    {
        "text": " el rango de la lista. Es mayor que el largo de la lista. ¿Qué dice acá?",
        "start": 786.0,
        "end": 791.0
    },
    {
        "text": " Bueno, si le en ahí dice insertar la posición N lo que hace es agregar",
        "start": 791.0,
        "end": 794.0
    },
    {
        "text": " el elemento en esa posición y los elementos que está en esa posición",
        "start": 794.0,
        "end": 797.0
    },
    {
        "text": " para allá se corren un lugar. Es como que inserta y desplaza",
        "start": 797.0,
        "end": 801.0
    },
    {
        "text": " lo que estaban de ahí para la derecha, un lugar. Les hace lugar,",
        "start": 801.0,
        "end": 805.0
    },
    {
        "text": " digamos, ¿no? Como si fuera un arreglo diciendo, corranse ustedes que",
        "start": 805.0,
        "end": 808.0
    },
    {
        "text": " ahora vengo yo la posición 5. ¿Ok? Y qué dice este texto cuando",
        "start": 808.0,
        "end": 813.0
    },
    {
        "text": " quiere insertar una posición mayor que el largo de la lista,",
        "start": 813.0,
        "end": 817.0
    },
    {
        "text": " lo inserta al final. Si no es la tinta largo diez y queréis insertar",
        "start": 817.0,
        "end": 821.0
    },
    {
        "text": " la posición 15 no, valen la 11. Se va simple al final. Podría decir que",
        "start": 821.0,
        "end": 826.0
    },
    {
        "text": " es un error. ¿Quién determina eso? El que escribe la post-condición.",
        "start": 826.0,
        "end": 830.0
    },
    {
        "text": " Podría decirla, pero una vez que vos escribiste la post-condición",
        "start": 834.0,
        "end": 837.0
    },
    {
        "text": " ese texto quedó fijo el contrato. ¿Eh?",
        "start": 837.0,
        "end": 842.0
    },
    {
        "text": " Bueno, pero acá no estoy trabajando con orden, estoy trabajando",
        "start": 843.0,
        "end": 847.0
    },
    {
        "text": " por posición, pero también podría ser si fuera ordenada",
        "start": 847.0,
        "end": 850.0
    },
    {
        "text": " que pasaría subir arrepedido. Lo que quiero que no tenés lo siguiente,",
        "start": 850.0,
        "end": 853.0
    },
    {
        "text": " cuando uno define el texto y ese texto es completo para todo el",
        "start": 853.0,
        "end": 858.0
    },
    {
        "text": " escenario de este dibujito, quedó escrito el contrato de su operación.",
        "start": 858.0,
        "end": 861.0
    },
    {
        "text": " Y cuando quede escrito el contrato, lo que quiero un poco señalar",
        "start": 861.0,
        "end": 866.0
    },
    {
        "text": " con más fuerza, cuando es que he escrito ese contrato, que es lo",
        "start": 866.0,
        "end": 871.0
    },
    {
        "text": " que va acá en la especificación. La aplicación ya sabe que cuando",
        "start": 872.0,
        "end": 877.0
    },
    {
        "text": " el invoque sin saber cómo va a estar implementado, que es lo que va a",
        "start": 877.0,
        "end": 880.0
    },
    {
        "text": " ser. Y además ese texto le dice a cualquier implementador de",
        "start": 880.0,
        "end": 885.0
    },
    {
        "text": " estos módulos que no tiene libertad para hacer lo que quiera",
        "start": 885.0,
        "end": 889.0
    },
    {
        "text": " cuando va a implementar esa operación. Podría elegir la estructura",
        "start": 889.0,
        "end": 892.0
    },
    {
        "text": " más o menos eficiente, pero tiene que respetar ese comportamiento.",
        "start": 892.0,
        "end": 895.0
    },
    {
        "text": " No puede decir, ¿Ah, no? ¿Usa vez que en vez de insertarlo al final",
        "start": 895.0,
        "end": 899.0
    },
    {
        "text": " y cuando es mayor algo de la lista, voy a decir que es un error? No,",
        "start": 899.0,
        "end": 903.0
    },
    {
        "text": " está rompiendo el contrato. ¿Sentiendo? Por eso es un tan importante",
        "start": 903.0,
        "end": 907.0
    },
    {
        "text": " estos contratos, porque son el vínculo entre las aplicaciones y",
        "start": 907.0,
        "end": 910.0
    },
    {
        "text": " las implementaciones. Si eso no se respeta, ya hay una manera",
        "start": 910.0,
        "end": 915.0
    },
    {
        "text": " de hacer rompest idea de que yo cambio la implementación y el",
        "start": 915.0,
        "end": 919.0
    },
    {
        "text": " sistema que es la aplicación sigue funcionando. Por eso que los",
        "start": 919.0,
        "end": 923.0
    },
    {
        "text": " sistemas grandes, aunque no lo crean, uno de los componentes más",
        "start": 923.0,
        "end": 926.0
    },
    {
        "text": " importantes son los contratos, las especificaciones, lo que uno",
        "start": 926.0,
        "end": 930.0
    },
    {
        "text": " debería firmar como el contrato del software. Estamos de acuerdo con que",
        "start": 930.0,
        "end": 933.0
    },
    {
        "text": " eso es lo que quiere el sistema, las especificaciones de todos los",
        "start": 933.0,
        "end": 936.0
    },
    {
        "text": " módulos en este diseño, recién ahí empieza a implementar. Porque si",
        "start": 936.0,
        "end": 939.0
    },
    {
        "text": " eso no está claro de alguna manera la funcionalidad, todavía no",
        "start": 939.0,
        "end": 943.0
    },
    {
        "text": " el cliente no sabe lo que quiere. Está bien, y hasta que no sé para",
        "start": 943.0,
        "end": 946.0
    },
    {
        "text": " lo que quiere, no empieza a hacer los códigos, porque ya después",
        "start": 946.0,
        "end": 949.0
    },
    {
        "text": " si no voy a tener que estar cambiando la codificación de lo que",
        "start": 949.0,
        "end": 952.0
    },
    {
        "text": " espera, porque todavía no sabe lo que quiere. Se entiende?",
        "start": 952.0,
        "end": 957.0
    },
    {
        "text": " Volvemos acá entonces. Tábamos con el ejemplo de este,",
        "start": 957.0,
        "end": 962.0
    },
    {
        "text": " una idea, bueno, si ya me decís cómo construir la lista vacía y",
        "start": 962.0,
        "end": 965.0
    },
    {
        "text": " cómo insertar en cualquier caso si es dentro o fuera del rango de la",
        "start": 965.0,
        "end": 969.0
    },
    {
        "text": " lista, cómo se va a comportar, digo, vamos a ver los predicados",
        "start": 969.0,
        "end": 973.0
    },
    {
        "text": " ahora para este módulo. La idea, bueno, un predicado es chequear",
        "start": 973.0,
        "end": 976.0
    },
    {
        "text": " si la lista está vacío, no, para obtener elementos, por ejemplo.",
        "start": 976.0,
        "end": 980.0
    },
    {
        "text": " Y otro predicado como obvio de posiciones podría ser saber si",
        "start": 980.0,
        "end": 984.0
    },
    {
        "text": " una posición un n, está definido en una lista, es decir,",
        "start": 984.0,
        "end": 988.0
    },
    {
        "text": " está en el rango del largo de la lista o no. Está bien?",
        "start": 988.0,
        "end": 992.0
    },
    {
        "text": " Como un buliano. Y por qué vas a relevante ese predicado",
        "start": 992.0,
        "end": 996.0
    },
    {
        "text": " seguramente en uno de los selectores que son estas dos.",
        "start": 996.0,
        "end": 1000.0
    },
    {
        "text": " Yo le dije que era el inverso del constructor, ¿qué hace el",
        "start": 1001.0,
        "end": 1004.0
    },
    {
        "text": " constructor? Agrega un elemento en una posición, ¿qué hacen",
        "start": 1004.0,
        "end": 1007.0
    },
    {
        "text": " los selectores? Obtienen o borran un elemento en una posición.",
        "start": 1007.0,
        "end": 1011.0
    },
    {
        "text": " Lo separen dos operaciones. Elemento, lo que hace es",
        "start": 1011.0,
        "end": 1016.0
    },
    {
        "text": " me da el elemento en la posición n de una lista y la operación",
        "start": 1016.0,
        "end": 1021.0
    },
    {
        "text": " borrar borra el elemento en la posición n de la lista.",
        "start": 1021.0,
        "end": 1025.0
    },
    {
        "text": " Sí? Y yo les pregunto, ¿qué pasa cuando quiero obtener",
        "start": 1025.0,
        "end": 1030.0
    },
    {
        "text": " el elemento en la posición n de una lista? ¿Qué puede pasar?",
        "start": 1030.0,
        "end": 1034.0
    },
    {
        "text": " Cuando con ese n, porque si ese n está, digo,",
        "start": 1037.0,
        "end": 1041.0
    },
    {
        "text": " ¿a, el posicion n es el valor de quisi? Piensa, general.",
        "start": 1041.0,
        "end": 1047.0
    },
    {
        "text": " ¿Qué no tiene que arranguar el elemento? ¿Qué no tiene que arranguar el",
        "start": 1049.0,
        "end": 1051.0
    },
    {
        "text": " rango de la lista? Y dice, ¿y si tiene que arrertorno el",
        "start": 1051.0,
        "end": 1053.0
    },
    {
        "text": " elemento que va a inventar un elemento? Entonces ahí",
        "start": 1053.0,
        "end": 1057.0
    },
    {
        "text": " es útil poner precondición. O sea, para la operación",
        "start": 1057.0,
        "end": 1061.0
    },
    {
        "text": " el elemento, digo, arrertorno un elemento que está en la posición n,",
        "start": 1061.0,
        "end": 1064.0
    },
    {
        "text": " si la posición n está definida y ahí viene el predicado que",
        "start": 1064.0,
        "end": 1068.0
    },
    {
        "text": " acabamos de poner en la transparencia anterior. ¿Por qué? Porque no",
        "start": 1068.0,
        "end": 1071.0
    },
    {
        "text": " podría chequear la implementación porque no tengo la",
        "start": 1071.0,
        "end": 1074.0
    },
    {
        "text": " implementación cuando yo específico. Entonces, tengo que tener un",
        "start": 1074.0,
        "end": 1076.0
    },
    {
        "text": " predicado que me ayude a preguntar por eso.",
        "start": 1076.0,
        "end": 1079.0
    },
    {
        "text": " ¿Está bien? El borrar también podría tener",
        "start": 1079.0,
        "end": 1083.0
    },
    {
        "text": " usar ese predicado, pero el borrar como no tiene que retornar",
        "start": 1083.0,
        "end": 1086.0
    },
    {
        "text": " un elemento simplemente es borrarlo, una opción sería decir,",
        "start": 1086.0,
        "end": 1089.0
    },
    {
        "text": " borre el elemento que está en la posición n y piensenle",
        "start": 1089.0,
        "end": 1092.0
    },
    {
        "text": " de inversa como insertamos. ¿Qué pasa si esa posición está?",
        "start": 1092.0,
        "end": 1095.0
    },
    {
        "text": " ¿Es esta? ¿Qué harían con la lista? piensen",
        "start": 1095.0,
        "end": 1100.0
    },
    {
        "text": " inversos como hicimos el insertar, quisimos el insertar.",
        "start": 1100.0,
        "end": 1104.0
    },
    {
        "text": " Lo metía y le hacía el lugar y corría todo un lugar.",
        "start": 1104.0,
        "end": 1108.0
    },
    {
        "text": " Entonces, ¿qué haría el borrar y de inversa esa?",
        "start": 1108.0,
        "end": 1112.0
    },
    {
        "text": " Lo quita y contrae la lista. O sea, desplaza lo que estaban",
        "start": 1112.0,
        "end": 1116.0
    },
    {
        "text": " a la derecha un lugar para la izquierda. Esa es la idea como",
        "start": 1116.0,
        "end": 1119.0
    },
    {
        "text": " recíproca inversa. Ahora, ¿qué pasa si esa posición no",
        "start": 1119.0,
        "end": 1123.0
    },
    {
        "text": " está en el rango de la lista? Eso es si está en el rango de la lista.",
        "start": 1123.0,
        "end": 1126.0
    },
    {
        "text": " Entonces, ahí podría decir, precondición que esté,",
        "start": 1126.0,
        "end": 1129.0
    },
    {
        "text": " pero como no tengo que retornar, no tengo que inventar",
        "start": 1129.0,
        "end": 1132.0
    },
    {
        "text": " nada, podría decir que si la posición no está definida,",
        "start": 1132.0,
        "end": 1135.0
    },
    {
        "text": " la lista no se toca. O sea, esa es una opción cuando",
        "start": 1135.0,
        "end": 1138.0
    },
    {
        "text": " no tengo que retornar, decir, no, como parte de la",
        "start": 1138.0,
        "end": 1141.0
    },
    {
        "text": " poscondición digo que no tiene efecto. Si la lista que",
        "start": 1141.0,
        "end": 1143.0
    },
    {
        "text": " igual, de quién depende decir, no, precondición,",
        "start": 1143.0,
        "end": 1147.0
    },
    {
        "text": " no, que no tenga efecto del que especifica. Una vez que es",
        "start": 1147.0,
        "end": 1150.0
    },
    {
        "text": " que descrito eso en el contrato, en el caso de ustedes,",
        "start": 1150.0,
        "end": 1153.0
    },
    {
        "text": " la tarea, dos docentes, criimos los contrato, los",
        "start": 1153.0,
        "end": 1156.0
    },
    {
        "text": " H, las prey poscondición, usted no lo puede elegir eso.",
        "start": 1156.0,
        "end": 1159.0
    },
    {
        "text": " Porque nosotros después uniformemente hacemos una",
        "start": 1159.0,
        "end": 1163.0
    },
    {
        "text": " aplicación para chequear todos, independientemente la",
        "start": 1163.0,
        "end": 1166.0
    },
    {
        "text": " implementación que haga uno de ustedes que hacemos nosotros.",
        "start": 1166.0,
        "end": 1170.0
    },
    {
        "text": " Para saber si está bien o más lo que hicieron.",
        "start": 1170.0,
        "end": 1174.0
    },
    {
        "text": " ¿Eh? Caso se prueba. El caso de prueba contra quién va",
        "start": 1175.0,
        "end": 1179.0
    },
    {
        "text": " contra el contrato, el H. Ahora, si vuelve a existir con una",
        "start": 1179.0,
        "end": 1183.0
    },
    {
        "text": " lista, volve a existir con una regla, cierto módulo, no me importa.",
        "start": 1183.0,
        "end": 1186.0
    },
    {
        "text": " Yo quiero que los dos me den el mismo resultado.",
        "start": 1186.0,
        "end": 1189.0
    },
    {
        "text": " Entonces yo voy contra el H, contra el contrato. Y el",
        "start": 1189.0,
        "end": 1192.0
    },
    {
        "text": " contrato es lo que no pueden tocar con lo cual mi aplicación,",
        "start": 1192.0,
        "end": 1195.0
    },
    {
        "text": " que es el caso de prueba, es el mismo para todos.",
        "start": 1195.0,
        "end": 1198.0
    },
    {
        "text": " No lo tengo que adaptar a cómo le implemento cada uno.",
        "start": 1198.0,
        "end": 1201.0
    },
    {
        "text": " Es la misma idea, pero llevado al desarrollo de sistemas",
        "start": 1201.0,
        "end": 1204.0
    },
    {
        "text": " grandes. Bueno, una operación típica que no suele",
        "start": 1204.0,
        "end": 1210.0
    },
    {
        "text": " poner también es un testruir, en este caso, que una la",
        "start": 1210.0,
        "end": 1214.0
    },
    {
        "text": " puede pensar como una destructora, que lo que hace es más",
        "start": 1214.0,
        "end": 1216.0
    },
    {
        "text": " desde el punto de vista de uso eficiente de los recursos.",
        "start": 1216.0,
        "end": 1219.0
    },
    {
        "text": " Libera es como la inversa de construir, ¿no? Libera",
        "start": 1219.0,
        "end": 1222.0
    },
    {
        "text": " toda la memoria que está usando. Cuando no voy a usar",
        "start": 1222.0,
        "end": 1224.0
    },
    {
        "text": " más la lista es como inversa de crear, bueno, destruir,",
        "start": 1224.0,
        "end": 1227.0
    },
    {
        "text": " liberando la memoria, para que no quede colgazo.",
        "start": 1227.0,
        "end": 1230.0
    },
    {
        "text": " Sobre todo, porque acá usamos mucho memoria dinámica.",
        "start": 1230.0,
        "end": 1233.0
    },
    {
        "text": " Entonces para no dejar toda la memoria de genio con new",
        "start": 1233.0,
        "end": 1236.0
    },
    {
        "text": " colgada, en general uno suele poner una operación destruir.",
        "start": 1236.0,
        "end": 1239.0
    },
    {
        "text": " Que otras operaciones a veces van a encontrar en las",
        "start": 1239.0,
        "end": 1242.0
    },
    {
        "text": " especificaciones de los módulos, operaciones como esta que",
        "start": 1242.0,
        "end": 1246.0
    },
    {
        "text": " genera, dada un tipo de trato de una lista, una pilón de",
        "start": 1246.0,
        "end": 1250.0
    },
    {
        "text": " cola, me da una copia o un clon, se suele llamar también.",
        "start": 1250.0,
        "end": 1254.0
    },
    {
        "text": " Que es algo idéntico a ellos, pero sin compartirme",
        "start": 1254.0,
        "end": 1258.0
    },
    {
        "text": " la memoria. Y por qué eso es útil? Porque muchas veces",
        "start": 1258.0,
        "end": 1261.0
    },
    {
        "text": " uno dice, mira, tengo la lista de espera de él vuelo.",
        "start": 1261.0,
        "end": 1264.0
    },
    {
        "text": " Entonces, dame una copia, porque yo quiero borrar, quiero",
        "start": 1264.0,
        "end": 1267.0
    },
    {
        "text": " buscar, pero no quiero tocar lo original. Entonces, me",
        "start": 1267.0,
        "end": 1270.0
    },
    {
        "text": " hago una copia, ahí sí puedo hacer lo que quiera, también,",
        "start": 1270.0,
        "end": 1273.0
    },
    {
        "text": " y la original la mantengué intacta. Y otra operación que suele ser",
        "start": 1273.0,
        "end": 1277.0
    },
    {
        "text": " útil, que a veces para no estar recorriendo múltiples veces",
        "start": 1277.0,
        "end": 1280.0
    },
    {
        "text": " una estructura es, dame la cantidad de elementos que tiene",
        "start": 1280.0,
        "end": 1283.0
    },
    {
        "text": " la estructura, la lista, la pila, la cola, el largo uno de",
        "start": 1283.0,
        "end": 1286.0
    },
    {
        "text": " la línea. Son como operaciones comunes que suelen estar en",
        "start": 1286.0,
        "end": 1289.0
    },
    {
        "text": " muchos tipos hasta el trato parecido. Ahora bien, cuando voy",
        "start": 1289.0,
        "end": 1293.0
    },
    {
        "text": " a implementar, ¿qué cosas a ustedes le aparece? ¿No? Una dice, ¿qué? ¿Cuál es",
        "start": 1293.0,
        "end": 1298.0
    },
    {
        "text": " la guía para implementar? Bueno, implementar primero es elegir",
        "start": 1298.0,
        "end": 1302.0
    },
    {
        "text": " una estructura, una representación, ese estruct, ponerle una",
        "start": 1302.0,
        "end": 1306.0
    },
    {
        "text": " lista, un árbol, un contador, no sé, lo que quieran, y después",
        "start": 1306.0,
        "end": 1310.0
    },
    {
        "text": " elegir la estructura que tengo que agarrar, cada operación que",
        "start": 1310.0,
        "end": 1313.0
    },
    {
        "text": " está en el punto H, y quiero que hagan. Implementar la",
        "start": 1313.0,
        "end": 1317.0
    },
    {
        "text": " usando esa estructura, ¿cuál es la guía? La prey poscondición",
        "start": 1317.0,
        "end": 1320.0
    },
    {
        "text": " que es el contrato de su operación. Para que, para que después",
        "start": 1320.0,
        "end": 1323.0
    },
    {
        "text": " conduce la vaya a testiar, tenga el comportamiento que yo quería.",
        "start": 1323.0,
        "end": 1326.0
    },
    {
        "text": " ¿Sabía? Un ejemplo podría ser si piensa una lista,",
        "start": 1326.0,
        "end": 1331.0
    },
    {
        "text": " usar como implementación como estructura, una lista simplemente",
        "start": 1331.0,
        "end": 1334.0
    },
    {
        "text": " encadenada, sobre todo si piensa que esa lista no tiene un largo",
        "start": 1334.0,
        "end": 1338.0
    },
    {
        "text": " máximo. Ahora bien, ¿qué pasa cuando voy a implementar",
        "start": 1338.0,
        "end": 1342.0
    },
    {
        "text": " y algunas de esas operaciones tenía una precondición? ¿Cómo",
        "start": 1342.0,
        "end": 1347.0
    },
    {
        "text": " el general el implementador va a decir qué hago yo con la",
        "start": 1347.0,
        "end": 1350.0
    },
    {
        "text": " precondición? La precondición es como algo que uno assume, ¿no?",
        "start": 1350.0,
        "end": 1354.0
    },
    {
        "text": " Lo que tiene que asegurar el código es la poscondición,",
        "start": 1354.0,
        "end": 1357.0
    },
    {
        "text": " que lo que haga, lo que programen, me asegura que la poscondición",
        "start": 1357.0,
        "end": 1362.0
    },
    {
        "text": " es el resultado esperado al final. La precondición es como algo",
        "start": 1362.0,
        "end": 1365.0
    },
    {
        "text": " que se asegura cuando me invocan. Una alternativa,",
        "start": 1365.0,
        "end": 1368.0
    },
    {
        "text": " estar muy credulos y asumir que la precondición se cumple.",
        "start": 1368.0,
        "end": 1373.0
    },
    {
        "text": " Si la precondición dice la retona el tope de una pila y",
        "start": 1373.0,
        "end": 1378.0
    },
    {
        "text": " precondición dice la pila no es vacía, yo cuando voy a implementar",
        "start": 1378.0,
        "end": 1381.0
    },
    {
        "text": " no chequeo si la pila es vacía, supongo asumo creo que la",
        "start": 1381.0,
        "end": 1385.0
    },
    {
        "text": " pila no es vacía y programo no considero, por ejemplo,",
        "start": 1385.0,
        "end": 1388.0
    },
    {
        "text": " entonces el caso de la pila vacía, el puntero nulo, lo que",
        "start": 1388.0,
        "end": 1391.0
    },
    {
        "text": " sea cuando voy a implementar. Eso es ser credulo, eso funciona",
        "start": 1391.0,
        "end": 1395.0
    },
    {
        "text": " en realidad y sí, si todos respetaran el contrato no debería",
        "start": 1395.0,
        "end": 1399.0
    },
    {
        "text": " haber problema. ¿Qué es lo que pasa en la práctica?",
        "start": 1399.0,
        "end": 1402.0
    },
    {
        "text": " El contrato es como el manual de usuario,",
        "start": 1402.0,
        "end": 1405.0
    },
    {
        "text": " es un sistema grande, ¿no? Todos tienen celular.",
        "start": 1405.0,
        "end": 1408.0
    },
    {
        "text": " ¿Quién le dio el manual del celular para instalar o para hacer",
        "start": 1408.0,
        "end": 1413.0
    },
    {
        "text": " lo que sea? Nadie. Bueno, eso a veces pasa con los",
        "start": 1413.0,
        "end": 1417.0
    },
    {
        "text": " puntos H. Todos creen porque miran la firma del método",
        "start": 1417.0,
        "end": 1422.0
    },
    {
        "text": " directamente dice, ah, esto debe hacer tal cosa y no fue a",
        "start": 1422.0,
        "end": 1425.0
    },
    {
        "text": " leer la prey poscondición que es un manual de usuario.",
        "start": 1425.0,
        "end": 1428.0
    },
    {
        "text": " Entonces puede ser que yo vió de una precondición que llame",
        "start": 1428.0,
        "end": 1431.0
    },
    {
        "text": " al operación y no cheque, si era vacío, ¿no?",
        "start": 1431.0,
        "end": 1434.0
    },
    {
        "text": " Entonces si el que implementó no chequeo esa condición porque",
        "start": 1434.0,
        "end": 1439.0
    },
    {
        "text": " dice, ¿por qué le tengo que chequear yo? Si, me dijeron que no",
        "start": 1439.0,
        "end": 1442.0
    },
    {
        "text": " va a venir vacía. Se va a caer. Entonces la programación",
        "start": 1442.0,
        "end": 1445.0
    },
    {
        "text": " defensiva que se suele damar es protegerse de los malos",
        "start": 1445.0,
        "end": 1449.0
    },
    {
        "text": " susos de la gente que no lee los manuales de usuario.",
        "start": 1449.0,
        "end": 1452.0
    },
    {
        "text": " Entonces una forma podría ser, típicamente en sistemas,",
        "start": 1452.0,
        "end": 1456.0
    },
    {
        "text": " considerarlos a mano, poner if, tipo if, ¿no?",
        "start": 1456.0,
        "end": 1460.0
    },
    {
        "text": " O la operación de control o de chequeo que tengan cualquier",
        "start": 1460.0,
        "end": 1463.0
    },
    {
        "text": " lenguaje, ¿no? Si la pila es vacía, le deje un mensaje,",
        "start": 1463.0,
        "end": 1467.0
    },
    {
        "text": " un insulto ahí al programado, no, diciendo, ¿Estás usando",
        "start": 1467.0,
        "end": 1470.0
    },
    {
        "text": " la encerquía y no se podía? Y ahí veo sin tarrumpo,",
        "start": 1470.0,
        "end": 1473.0
    },
    {
        "text": " la ejecución del programa o lo que sea. Muy artesanal porque",
        "start": 1473.0,
        "end": 1477.0
    },
    {
        "text": " me empezaron a meter mucho sif para chequear cosas.",
        "start": 1477.0,
        "end": 1480.0
    },
    {
        "text": " ¿Casiara la decundición? ¿Casiara la decundición?",
        "start": 1480.0,
        "end": 1483.0
    },
    {
        "text": " ¿Casiara la decundición? ¿Casiara la decundición? ¿Casiara la decundición?",
        "start": 1483.0,
        "end": 1486.0
    },
    {
        "text": " Considera la precondición, pero lo alerto y en vez de seguir",
        "start": 1486.0,
        "end": 1489.0
    },
    {
        "text": " ejecutando le doy un mensaje de error, decidos yo sin tarrumpo",
        "start": 1489.0,
        "end": 1494.0
    },
    {
        "text": " la ejecución del programa, no, pero alerto no es que se sigue",
        "start": 1494.0,
        "end": 1497.0
    },
    {
        "text": " una, dice, ¿cáe? Porque el puntero se cayó y él dice, ¿qué pasó después?",
        "start": 1497.0,
        "end": 1500.0
    },
    {
        "text": " ¿Quién es la culpa? ¿Y si tengo milería de código,",
        "start": 1500.0,
        "end": 1503.0
    },
    {
        "text": " no encontrar quién es la culpa? ¿Es más difícil?",
        "start": 1503.0,
        "end": 1506.0
    },
    {
        "text": " Y yo lo chequí, me adelanté y puse un íd, ¿tá?",
        "start": 1506.0,
        "end": 1510.0
    },
    {
        "text": " Mira, lo que pasó, que estoy violando la operación tal,",
        "start": 1510.0,
        "end": 1513.0
    },
    {
        "text": " el contrato tal, bueno, andá a corregir eso en el llamado",
        "start": 1513.0,
        "end": 1516.0
    },
    {
        "text": " de la aplicación, no lo puedes llamar en ese caso.",
        "start": 1516.0,
        "end": 1518.0
    },
    {
        "text": " Es más fácil corregir la error.",
        "start": 1518.0,
        "end": 1520.0
    },
    {
        "text": " Lo lenguaje también tiene herramientas que no son tan",
        "start": 1520.0,
        "end": 1524.0
    },
    {
        "text": " digamos artesanales, como por ejemplo en seis y más más tenemos",
        "start": 1524.0,
        "end": 1527.0
    },
    {
        "text": " el azarte y en mucho lenguaje tengo toda una estructura",
        "start": 1527.0,
        "end": 1531.0
    },
    {
        "text": " para manejar excepciones, por ejemplo, ¿no?",
        "start": 1531.0,
        "end": 1533.0
    },
    {
        "text": " De la azarte saben lo que hace sí.",
        "start": 1533.0,
        "end": 1535.0
    },
    {
        "text": " No.",
        "start": 1535.0,
        "end": 1537.0
    },
    {
        "text": " Azarte lo que hace es cheque una expresión.",
        "start": 1537.0,
        "end": 1540.0
    },
    {
        "text": " Buliana, yo digo, azarte, por ejemplo,",
        "start": 1542.0,
        "end": 1544.0
    },
    {
        "text": " not pilavacía.",
        "start": 1544.0,
        "end": 1546.0
    },
    {
        "text": " ¿No? Es Buliano. ¿Qué va a hacer el código cuando viene ejecutando?",
        "start": 1547.0,
        "end": 1550.0
    },
    {
        "text": " Viene ejecutando, supone que se senten muy llenido en el código",
        "start": 1550.0,
        "end": 1552.0
    },
    {
        "text": " y se encuentra con esta, Evalúa.",
        "start": 1552.0,
        "end": 1554.0
    },
    {
        "text": " Si le da tru, diciendo la precondición se cumple, si",
        "start": 1554.0,
        "end": 1558.0
    },
    {
        "text": " es que ejecutando como si fuera un filtro, ¿qué pasó?",
        "start": 1558.0,
        "end": 1561.0
    },
    {
        "text": " Ahora, si le da false, interrompe el ejecución del programa solo",
        "start": 1561.0,
        "end": 1567.0
    },
    {
        "text": " y me dice, en tal modelo, en tal línea se viola esta condición.",
        "start": 1567.0,
        "end": 1571.0
    },
    {
        "text": " Entonces, el programador que puede tener muchos modulos,",
        "start": 1571.0,
        "end": 1574.0
    },
    {
        "text": " le dice en qué modelo que línea saltó por esta condición.",
        "start": 1574.0,
        "end": 1578.0
    },
    {
        "text": " Permite más rápidamente encontrar la error.",
        "start": 1578.0,
        "end": 1581.0
    },
    {
        "text": " Permite también si usa como herramienta de bug,",
        "start": 1581.0,
        "end": 1583.0
    },
    {
        "text": " y no, a veces pone muchos azarte cuando no le funciona bien",
        "start": 1583.0,
        "end": 1587.0
    },
    {
        "text": " para ver qué condiciones se deberían cumplir y la primera que salte,",
        "start": 1587.0,
        "end": 1590.0
    },
    {
        "text": " acá, claro, está este puntero es nulo y no podría ser nulo",
        "start": 1590.0,
        "end": 1593.0
    },
    {
        "text": " y por eso me está dando una roja.",
        "start": 1593.0,
        "end": 1596.0
    },
    {
        "text": " Ok? Esto es más programación defensiva.",
        "start": 1596.0,
        "end": 1599.0
    },
    {
        "text": " Bien, van a ver, tú dices algunas cosas más generales",
        "start": 1601.0,
        "end": 1604.0
    },
    {
        "text": " que lo que es lista pilacola, nos va a aparecer la segunda par del curso,",
        "start": 1604.0,
        "end": 1607.0
    },
    {
        "text": " pero como usted da también una introducción, las voy generalizando.",
        "start": 1607.0,
        "end": 1610.0
    },
    {
        "text": " Cuando hablemos de tals, lista, pilacola o cualquiera,",
        "start": 1610.0,
        "end": 1614.0
    },
    {
        "text": " hay como dos sabores o dos justos.",
        "start": 1615.0,
        "end": 1617.0
    },
    {
        "text": " Los has cotado si los no has cotado.",
        "start": 1617.0,
        "end": 1619.0
    },
    {
        "text": " Cuando crees un modelo nuevo, ¿qué quiere decir, ha cotado?",
        "start": 1620.0,
        "end": 1623.0
    },
    {
        "text": " ¿Qué ese tab es lista, esa pila de cora,",
        "start": 1624.0,
        "end": 1627.0
    },
    {
        "text": " puede crecer al osumo hasta un cierto tamaño?",
        "start": 1627.0,
        "end": 1629.0
    },
    {
        "text": " Está bien, y en la realidad eso pasa a una lista de pasajeros de un vuelo",
        "start": 1630.0,
        "end": 1635.0
    },
    {
        "text": " y tiene que estar cotada porque son la cantidad de asiento que tiene el avión.",
        "start": 1635.0,
        "end": 1640.0
    },
    {
        "text": " No sé, no es infinita.",
        "start": 1640.0,
        "end": 1642.0
    },
    {
        "text": " Hay otras cosas que quisiera que no fuera cotada,",
        "start": 1643.0,
        "end": 1645.0
    },
    {
        "text": " si que una base de datos para manejar el producto,",
        "start": 1645.0,
        "end": 1647.0
    },
    {
        "text": " de que bien le diga, mientras tenga memoria, no me la corte,",
        "start": 1647.0,
        "end": 1649.0
    },
    {
        "text": " dejala que siga almacenando porque no sé cuánto el máximo que voy a tener.",
        "start": 1649.0,
        "end": 1653.0
    },
    {
        "text": " Eso depende de la realidad si quiero que sea cotado o no cotado.",
        "start": 1653.0,
        "end": 1656.0
    },
    {
        "text": " ¿En qué cambio el contrato de la especificación de una cotada o no cotado?",
        "start": 1657.0,
        "end": 1661.0
    },
    {
        "text": " Básicamente en estas tres cosas.",
        "start": 1661.0,
        "end": 1663.0
    },
    {
        "text": " Cuando número 1, che ve estas tres pequeñas diferencias.",
        "start": 1664.0,
        "end": 1667.0
    },
    {
        "text": " Primero, que la operación que crea el vacío, digamos,",
        "start": 1667.0,
        "end": 1671.0
    },
    {
        "text": " si esa cotada recibe un parámetro, que es el tamaño máximo.",
        "start": 1671.0,
        "end": 1675.0
    },
    {
        "text": " Entonces yo cuando lo creo, diciendo que voy a generar la lista vacía",
        "start": 1676.0,
        "end": 1679.0
    },
    {
        "text": " pero que puede tener al osumo 100 elementos, le paso como parámetro un 100.",
        "start": 1679.0,
        "end": 1682.0
    },
    {
        "text": " Está bien?",
        "start": 1684.0,
        "end": 1685.0
    },
    {
        "text": " Entonces después los futuros insartarán a poder crecer hasta 100, no más.",
        "start": 1685.0,
        "end": 1689.0
    },
    {
        "text": " Segunda cosa, se agreguen entonces un predicado que no es el estar vacía",
        "start": 1690.0,
        "end": 1695.0
    },
    {
        "text": " sino el estar geno, porque ahora aparece la noción, les decía que ha cotado,",
        "start": 1695.0,
        "end": 1698.0
    },
    {
        "text": " ahí es máximo.",
        "start": 1698.0,
        "end": 1700.0
    },
    {
        "text": " Entonces existe el concepto del predicado estar geno, truvo false.",
        "start": 1701.0,
        "end": 1704.0
    },
    {
        "text": " Y agrego una precondición, toda operación que agrega.",
        "start": 1706.0,
        "end": 1709.0
    },
    {
        "text": " ¿Por qué? Porque no puede agregar si está lleno.",
        "start": 1709.0,
        "end": 1712.0
    },
    {
        "text": " ¿También? Si está lleno, no te dejo agregar.",
        "start": 1713.0,
        "end": 1715.0
    },
    {
        "text": " Entonces ahí una precondición.",
        "start": 1715.0,
        "end": 1717.0
    },
    {
        "text": " ¿Está bien? Si no es acotado, siempre puedes agregar.",
        "start": 1718.0,
        "end": 1721.0
    },
    {
        "text": " Y en estas tres las memorias no tiene sentido el predicado estar lleno",
        "start": 1721.0,
        "end": 1725.0
    },
    {
        "text": " y el crear no tiene sentido que te de un tamaño máximo,",
        "start": 1725.0,
        "end": 1728.0
    },
    {
        "text": " porque a priori supongo que no va a estar acotado.",
        "start": 1728.0,
        "end": 1732.0
    },
    {
        "text": " Entonces cómo me de cuenta rápido?",
        "start": 1732.0,
        "end": 1734.0
    },
    {
        "text": " Cuando me ir un h y muchas veces en el crear se me de cuenta.",
        "start": 1734.0,
        "end": 1737.0
    },
    {
        "text": " Si tiene o no parámetro.",
        "start": 1737.0,
        "end": 1738.0
    },
    {
        "text": " Si recibe un entero, no recibe un entero.",
        "start": 1738.0,
        "end": 1740.0
    },
    {
        "text": " Entonces ahí me de cuenta si va a tener un tamaño máximo.",
        "start": 1740.0,
        "end": 1743.0
    },
    {
        "text": " Cuando voy a implementar cualquiera de los dos,",
        "start": 1746.0,
        "end": 1748.0
    },
    {
        "text": " uno diría a ver si les parece razonable.",
        "start": 1748.0,
        "end": 1750.0
    },
    {
        "text": " Si yo digo que la lista va a ser acotada y le paso un entero cuando la creo.",
        "start": 1751.0,
        "end": 1755.0
    },
    {
        "text": " Sí, por ejemplo.",
        "start": 1755.0,
        "end": 1756.0
    },
    {
        "text": " ¿Está bien?",
        "start": 1757.0,
        "end": 1758.0
    },
    {
        "text": " Es razonable pensar que un estado acotado se puede implementar naturalmente",
        "start": 1758.0,
        "end": 1763.0
    },
    {
        "text": " con estructuras más estáticas, como una regla, por ejemplo.",
        "start": 1763.0,
        "end": 1766.0
    },
    {
        "text": " Observo estática, aunque no lo añue, cuando define el tamaño, e fijo.",
        "start": 1766.0,
        "end": 1770.0
    },
    {
        "text": " En cambio, cuando es no acotada,",
        "start": 1770.0,
        "end": 1772.0
    },
    {
        "text": " uno suele pensar que lo voy a implementar más con estructuras dinámicas,",
        "start": 1772.0,
        "end": 1775.0
    },
    {
        "text": " una lista, una árbol.",
        "start": 1775.0,
        "end": 1777.0
    },
    {
        "text": " Está bien, algo que pueda crecer en tiempo de ejecución.",
        "start": 1778.0,
        "end": 1781.0
    },
    {
        "text": " Entonces, ¿acuerdo?",
        "start": 1781.0,
        "end": 1782.0
    },
    {
        "text": " Eso pasa, pero también se da el cruce.",
        "start": 1782.0,
        "end": 1786.0
    },
    {
        "text": " ¿Tiene sentido a dar piensen a esto que voy a preguntar?",
        "start": 1786.0,
        "end": 1789.0
    },
    {
        "text": " ¿Qué una lista acotada?",
        "start": 1789.0,
        "end": 1791.0
    },
    {
        "text": " 100 máximos.",
        "start": 1792.0,
        "end": 1793.0
    },
    {
        "text": " Yo igual le implementé con una lista de nodos.",
        "start": 1793.0,
        "end": 1795.0
    },
    {
        "text": " O digo acotada, y en vez de decirle, si él le digo un valor K.",
        "start": 1796.0,
        "end": 1799.0
    },
    {
        "text": " Y o tiene sentido que yo le he de vez con una regla",
        "start": 1800.0,
        "end": 1803.0
    },
    {
        "text": " que lo podría hecho, un arreglo de tamaño K, con una lista de nodos.",
        "start": 1803.0,
        "end": 1806.0
    },
    {
        "text": " ¿Por qué?",
        "start": 1807.0,
        "end": 1808.0
    },
    {
        "text": " Mejor con su memoria. Supongo que sé que si K, la cota es muy grande.",
        "start": 1810.0,
        "end": 1814.0
    },
    {
        "text": " Yo en realidad en la práctica estoy usando un valor mucho más pequeño que esa cota.",
        "start": 1814.0,
        "end": 1819.0
    },
    {
        "text": " Me cubrí con una cota muy grande, pero en la práctica uso muy poco.",
        "start": 1819.0,
        "end": 1823.0
    },
    {
        "text": " Estoy reservando, según arreglo, mucho espacio que no uso.",
        "start": 1824.0,
        "end": 1827.0
    },
    {
        "text": " En cambio, una lista de nodos, voy pidiendo un nodo cada vez que voy insertando en el elemento.",
        "start": 1828.0,
        "end": 1833.0
    },
    {
        "text": " Entonces, hace un manejo de la memoria mucho más ajustado a lo que precisó en cada momento.",
        "start": 1834.0,
        "end": 1839.0
    },
    {
        "text": " Entonces, puede ser que aunque no sea cotado, aunque sea cotado, yo uso una estructura dinámica.",
        "start": 1840.0,
        "end": 1845.0
    },
    {
        "text": " Entonces, cualquier implementación dinámica, yo la puedo usar para un acotado.",
        "start": 1847.0,
        "end": 1851.0
    },
    {
        "text": " Básicamente que me diría, llevar la lista o la árbol, pero si vas a tener un contador",
        "start": 1851.0,
        "end": 1856.0
    },
    {
        "text": " en la representación.",
        "start": 1856.0,
        "end": 1857.0
    },
    {
        "text": " Entonces, cuando ese contador llega al máximo, no dejan insertar más.",
        "start": 1857.0,
        "end": 1861.0
    },
    {
        "text": " Pero si vas una estructura dinámica.",
        "start": 1862.0,
        "end": 1864.0
    },
    {
        "text": " Entiende?",
        "start": 1864.0,
        "end": 1865.0
    },
    {
        "text": " Por la razón que decía él que puede ser mejor en el consumo de la memoria.",
        "start": 1865.0,
        "end": 1869.0
    },
    {
        "text": " Les parece que el inverso también se da que algo no ha cotado.",
        "start": 1870.0,
        "end": 1874.0
    },
    {
        "text": " Una lista no ha cotado.",
        "start": 1874.0,
        "end": 1876.0
    },
    {
        "text": " Tiene sentido, por ejemplo, implementarlo con un arreglo.",
        "start": 1876.0,
        "end": 1879.0
    },
    {
        "text": " Parece más raro a esa, ¿no?",
        "start": 1882.0,
        "end": 1884.0
    },
    {
        "text": " Pues sí, o si puede crecer.",
        "start": 1885.0,
        "end": 1887.0
    },
    {
        "text": " Claro, pero igual el arreglo parece más raro.",
        "start": 1888.0,
        "end": 1890.0
    },
    {
        "text": " Había bien.",
        "start": 1890.0,
        "end": 1891.0
    },
    {
        "text": " Vamos a ver que se usa igual en algún caso particular en la segunda parte del curso.",
        "start": 1891.0,
        "end": 1894.0
    },
    {
        "text": " Después los parciales, además, hagin.",
        "start": 1894.0,
        "end": 1896.0
    },
    {
        "text": " Las técnicas de hagin van a hacer eso.",
        "start": 1896.0,
        "end": 1898.0
    },
    {
        "text": " Van a suponer que algo puede crecer.",
        "start": 1898.0,
        "end": 1900.0
    },
    {
        "text": " Y yo voy a usar arreglos, porque el quéti debe dar el arreglo y la acceso directo a las posiciones.",
        "start": 1900.0,
        "end": 1905.0
    },
    {
        "text": " No tengo que navegar.",
        "start": 1905.0,
        "end": 1907.0
    },
    {
        "text": " Cuando yo tengo un numerito, es muy fácil, muy rápido, en orden 1,",
        "start": 1907.0,
        "end": 1911.0
    },
    {
        "text": " y era una posición.",
        "start": 1911.0,
        "end": 1912.0
    },
    {
        "text": " Entonces, vamos a ver que hagin se basa en eso.",
        "start": 1912.0,
        "end": 1914.0
    },
    {
        "text": " Entonces, el prefiere que cosa, que cuando llegué al límite, que hace redimension el arreglo,",
        "start": 1914.0,
        "end": 1919.0
    },
    {
        "text": " pasa todo, aunque sea costoso cada tanto, redimensiona y sigue trabajando.",
        "start": 1919.0,
        "end": 1923.0
    },
    {
        "text": " Entonces, es como que, siendo, ¡ah, me llene!",
        "start": 1923.0,
        "end": 1926.0
    },
    {
        "text": " Entonces, duplico el arreglo, seguir trabajando.",
        "start": 1926.0,
        "end": 1929.0
    },
    {
        "text": " Estes llenateno, duplicad el arreglo.",
        "start": 1929.0,
        "end": 1931.0
    },
    {
        "text": " Lo va grandando de a poco.",
        "start": 1931.0,
        "end": 1933.0
    },
    {
        "text": " Pero, si no, no, no, no, no, no.",
        "start": 1933.0,
        "end": 1935.0
    },
    {
        "text": " Es que, ¿no?",
        "start": 1935.0,
        "end": 1936.0
    },
    {
        "text": " Es que, ¿no?",
        "start": 1936.0,
        "end": 1937.0
    },
    {
        "text": " Seguir trabajando.",
        "start": 1937.0,
        "end": 1938.0
    },
    {
        "text": " Estes llenateno, duplicad el arreglo.",
        "start": 1938.0,
        "end": 1940.0
    },
    {
        "text": " Lo va grandando de a poco.",
        "start": 1940.0,
        "end": 1941.0
    },
    {
        "text": " Pero cada vez, puede ir a una posición.",
        "start": 1941.0,
        "end": 1943.0
    },
    {
        "text": " Por ejemplo, digo, anda la posicion en, no tiene que recorrer.",
        "start": 1943.0,
        "end": 1946.0
    },
    {
        "text": " Va y hace una cuenta en orden 1 a que se den la posicion en.",
        "start": 1946.0,
        "end": 1949.0
    },
    {
        "text": " ¿Eh?",
        "start": 1949.0,
        "end": 1951.0
    },
    {
        "text": " Tiene acceso directo.",
        "start": 1951.0,
        "end": 1952.0
    },
    {
        "text": " Entonces, vamos a ver que, quizás, cruces sean.",
        "start": 1952.0,
        "end": 1954.0
    },
    {
        "text": " Entonces, no pongan como sinónimo de acotado tipo arreglo o memoria estática",
        "start": 1954.0,
        "end": 1961.0
    },
    {
        "text": " y no acotado estructural dinámica, ¿vale?",
        "start": 1961.0,
        "end": 1964.0
    },
    {
        "text": " Se usa en general, pero también puede dar los cruces.",
        "start": 1964.0,
        "end": 1967.0
    },
    {
        "text": " ¿Ve bien?",
        "start": 1967.0,
        "end": 1968.0
    },
    {
        "text": " Y tiene sentido o algunas ventajas tierras.",
        "start": 1968.0,
        "end": 1971.0
    },
    {
        "text": " Ejemplos que hemos visto hasta ahora, en caso de listas,",
        "start": 1971.0,
        "end": 1974.0
    },
    {
        "text": " las dos más típicas son estas, sin plenca de nada o doble en cadenada.",
        "start": 1974.0,
        "end": 1978.0
    },
    {
        "text": " Para ir y volver.",
        "start": 1978.0,
        "end": 1979.0
    },
    {
        "text": " Pero también, yo ya les mostré cuando vimos listas variantes.",
        "start": 1979.0,
        "end": 1982.0
    },
    {
        "text": " ¿Ve bien?",
        "start": 1982.0,
        "end": 1984.0
    },
    {
        "text": " ¿Qué? A veces uno, además de una lista, ya, por ejemplo,",
        "start": 1984.0,
        "end": 1987.0
    },
    {
        "text": " acá el puntero, el comienzo y el puntero al final.",
        "start": 1987.0,
        "end": 1991.0
    },
    {
        "text": " ¿Por qué?",
        "start": 1991.0,
        "end": 1992.0
    },
    {
        "text": " Porque entonces más rápido cuando quiero, según mi contrato,",
        "start": 1992.0,
        "end": 1995.0
    },
    {
        "text": " hacer cosas es los extremos de la lista y mucho más rápida esta,",
        "start": 1995.0,
        "end": 1998.0
    },
    {
        "text": " más eficiente de esta implementación que esta,",
        "start": 1998.0,
        "end": 2001.0
    },
    {
        "text": " pues, evita que para ir al final, te anacarregorla la lista.",
        "start": 2001.0,
        "end": 2004.0
    },
    {
        "text": " ¿También?",
        "start": 2004.0,
        "end": 2006.0
    },
    {
        "text": " Y hoy les voy a dar un ejemplo de uso de esta segunda.",
        "start": 2006.0,
        "end": 2009.0
    },
    {
        "text": " Bueno, puede ser doble en cadenada, puede ser doble en cadenada",
        "start": 2009.0,
        "end": 2012.0
    },
    {
        "text": " con puntero al comienzo y final y esta aparece en la tarea 2.",
        "start": 2012.0,
        "end": 2015.0
    },
    {
        "text": " ¿También?",
        "start": 2015.0,
        "end": 2018.0
    },
    {
        "text": " Puede ser fíjense, o simple doble en cadenada,",
        "start": 2018.0,
        "end": 2021.0
    },
    {
        "text": " pero con un puntero, a un cierto nodo de la lista.",
        "start": 2021.0,
        "end": 2024.0
    },
    {
        "text": " Y este es muy útil para cuando uno quiere hablar de listas de posición actual.",
        "start": 2024.0,
        "end": 2029.0
    },
    {
        "text": " ¿También? Entonces, cuando digo insertado o borra,",
        "start": 2029.0,
        "end": 2032.0
    },
    {
        "text": " no es te paso un nene, ahora, si no te digo dónde estás parado.",
        "start": 2032.0,
        "end": 2036.0
    },
    {
        "text": " Y la donde estás parado es la posición actual.",
        "start": 2036.0,
        "end": 2038.0
    },
    {
        "text": " ¿Ve bien tener operaciones para avanzar o retroceder la posición actual?",
        "start": 2038.0,
        "end": 2043.0
    },
    {
        "text": " Como si fuera, en un fall system, ir al directorio padre y del directorio hijo,",
        "start": 2043.0,
        "end": 2047.0
    },
    {
        "text": " pero siempre estoy parado en un punto.",
        "start": 2047.0,
        "end": 2050.0
    },
    {
        "text": " ¿También? O en un editor de texto de la línea actual o corriente,",
        "start": 2051.0,
        "end": 2054.0
    },
    {
        "text": " moverte la línea arriba o la línea abajo.",
        "start": 2054.0,
        "end": 2057.0
    },
    {
        "text": " ¿También?",
        "start": 2057.0,
        "end": 2060.0
    },
    {
        "text": " Entonces, este es el ejemplo que lo voy a pasar mejor rápido",
        "start": 2060.0,
        "end": 2063.0
    },
    {
        "text": " porque también está en el paradigno.",
        "start": 2063.0,
        "end": 2065.0
    },
    {
        "text": " Es otro ejemplo de lista, y yo llamaría lista indizada.",
        "start": 2065.0,
        "end": 2069.0
    },
    {
        "text": " Este... Este, bueno, lista no acotada de posiciones implícitas.",
        "start": 2072.0,
        "end": 2079.0
    },
    {
        "text": " Implice o quiere decir que yo me refiero a una posición actual.",
        "start": 2080.0,
        "end": 2083.0
    },
    {
        "text": " No es un parámetro. Entonces, fíjense, por ejemplo, ¿dónde se distingue eso?",
        "start": 2083.0,
        "end": 2087.0
    },
    {
        "text": " Yo cuando digo el insertar dice insertar luego de la posición actual.",
        "start": 2087.0,
        "end": 2091.0
    },
    {
        "text": " O sea, se refiere a una posición actual.",
        "start": 2091.0,
        "end": 2093.0
    },
    {
        "text": " ¿También? Y acá dice que pasa el insertar en un caso o en el otro.",
        "start": 2094.0,
        "end": 2098.0
    },
    {
        "text": " Abanza, entonces, tengo que tener una noción de mover la posición actual",
        "start": 2100.0,
        "end": 2104.0
    },
    {
        "text": " y como si fuera un cursor. Bueno, esta tengo esta operación que dice",
        "start": 2104.0,
        "end": 2107.0
    },
    {
        "text": " que fija la posición actual al comienzo,",
        "start": 2107.0,
        "end": 2109.0
    },
    {
        "text": " esta que es avanzar la posición actual al próximo,",
        "start": 2109.0,
        "end": 2112.0
    },
    {
        "text": " y podría decir ¿y qué pasa si estoy al final de la lista?",
        "start": 2112.0,
        "end": 2116.0
    },
    {
        "text": " Bueno, por ejemplo, si la posición no corresponde, ¿eh?",
        "start": 2116.0,
        "end": 2121.0
    },
    {
        "text": " Esa, si esta no es vacía, la posición actual no corresponde",
        "start": 2121.0,
        "end": 2124.0
    },
    {
        "text": " al del último elemento. O sea, que es como una precondición.",
        "start": 2124.0,
        "end": 2128.0
    },
    {
        "text": " Entonces, uno de los parías, ¿y cómo avanza la posición actual?",
        "start": 2129.0,
        "end": 2131.0
    },
    {
        "text": " La operación de arriba dice fija la de comienzo y la otra avanzada",
        "start": 2131.0,
        "end": 2134.0
    },
    {
        "text": " como si fuera el siguiente. Entonces, ahí ya puedo iterar como si fuera un arreglo,",
        "start": 2135.0,
        "end": 2138.0
    },
    {
        "text": " se tía la posición al comienzo, avanzar hasta que llegueis a que",
        "start": 2138.0,
        "end": 2142.0
    },
    {
        "text": " a, por ejemplo, chequear si la posición actual es el último elemento.",
        "start": 2143.0,
        "end": 2147.0
    },
    {
        "text": " Entonces, ya con estas operaciones, como tuviera un iterador,",
        "start": 2147.0,
        "end": 2150.0
    },
    {
        "text": " se tía el comienzo, andá moviendo la siguiente hasta llegar al último.",
        "start": 2150.0,
        "end": 2154.0
    },
    {
        "text": " ¿También? Entonces me marco como si fuera un cursor que se va moviendo",
        "start": 2155.0,
        "end": 2159.0
    },
    {
        "text": " que no pierde la lista, pero se va moviendo la lista.",
        "start": 2159.0,
        "end": 2161.0
    },
    {
        "text": " Y tengo operaciones como eliminar o retornar, que dice retornar o eliminar",
        "start": 2162.0,
        "end": 2166.0
    },
    {
        "text": " el elemento en la posición corriente.",
        "start": 2166.0,
        "end": 2168.0
    },
    {
        "text": " Es si donde esté esparado hace algo.",
        "start": 2169.0,
        "end": 2170.0
    },
    {
        "text": " Cuando yo voy a implementar fija en si que para implementar esa,",
        "start": 2171.0,
        "end": 2173.0
    },
    {
        "text": " una estructura muy eficiente podría ser obviendo la de arriba o bien la de abajo.",
        "start": 2176.0,
        "end": 2181.0
    },
    {
        "text": " ¿Dónde la posición actual es esta? ¿Cuándo elegirían la de arriba o la de abajo?",
        "start": 2184.0,
        "end": 2187.0
    },
    {
        "text": " Dependiendo del contrato, ¿qué pequeño cambios les haría elegir o la de arriba",
        "start": 2188.0,
        "end": 2193.0
    },
    {
        "text": " a la de abajo?",
        "start": 2193.0,
        "end": 2194.0
    },
    {
        "text": " Exacto.",
        "start": 2197.0,
        "end": 2198.0
    },
    {
        "text": " Es decir, si alguna de las operaciones no solo dice avanzar, sino también dice ir a la posición",
        "start": 2198.0,
        "end": 2202.0
    },
    {
        "text": " anterior y quiero que esa sea fácil, le digo, ¿Ah, elijo esta? ¿Por qué esta me permite ir al",
        "start": 2202.0,
        "end": 2207.0
    },
    {
        "text": " anterior? En cambio, si no tengo la operación de ir al anterior, no diría, ¿Ah, me quedo con la de arriba?",
        "start": 2207.0,
        "end": 2211.0
    },
    {
        "text": " Porque total nunca vas a tener que ir para atrás.",
        "start": 2211.0,
        "end": 2213.0
    },
    {
        "text": " Y me evito trabajar con el listado del encadenada, que es un poquitito más engorrosa la",
        "start": 2214.0,
        "end": 2218.0
    },
    {
        "text": " primación, pero también ocupa un poquito más de memoria, porque cada no tiene un puntero",
        "start": 2218.0,
        "end": 2223.0
    },
    {
        "text": " más. No es mucho, pero un puntero más.",
        "start": 2223.0,
        "end": 2225.0
    },
    {
        "text": " Eso, uno lo elige mirando todos los operaciones del contrato a ver cuál se ajusta más",
        "start": 2226.0,
        "end": 2232.0
    },
    {
        "text": " a lo que yo quiero. Según la eficiencia, podría ser que todo lo resuelva,",
        "start": 2232.0,
        "end": 2238.0
    },
    {
        "text": " con esta, pero cada vez que haga con esta, vea, tiene que recorrer todo, o sea, me va a",
        "start": 2238.0,
        "end": 2248.0
    },
    {
        "text": " costar mucho más, va a ser muy ineficiente. Las otras variantes me permiten en distintos",
        "start": 2248.0,
        "end": 2253.0
    },
    {
        "text": " contratos ser más rápidos, tener muchas operaciones quizás no en orden en y sino en",
        "start": 2253.0,
        "end": 2258.0
    },
    {
        "text": " orden uno. ¿Se entiende? Bien, entonces estas dos listas de posiciones explícitas o",
        "start": 2258.0,
        "end": 2266.0
    },
    {
        "text": " implistas las van a ver en el práctico y va a aparecer alguna vez en sanitaria 3.",
        "start": 2266.0,
        "end": 2271.0
    },
    {
        "text": " Una variante que voy a pasar media rápida de la nación de lista es la pila, la pila es",
        "start": 2274.0,
        "end": 2280.0
    },
    {
        "text": " una lista, pero con un contrato muy restringido, porque tiene que respetar la política",
        "start": 2280.0,
        "end": 2285.0
    },
    {
        "text": " del último que ingresas el primero que sale, sin no puede insertar en el medio, no puede",
        "start": 2285.0,
        "end": 2290.0
    },
    {
        "text": " insertar ordenadamente, entonces está mucho más restringida, o sea, uno diría, la",
        "start": 2290.0,
        "end": 2297.0
    },
    {
        "text": " estructura es esta, o sea, si yo agrego estas me insertar, cuando saco tengo que sacar por",
        "start": 2297.0,
        "end": 2302.0
    },
    {
        "text": " ahí, porque es el último que puse, entonces ya no puedo hacer operaciones en el medio,",
        "start": 2302.0,
        "end": 2307.0
    },
    {
        "text": " está prohibido, se rompe la estructura de lifo, las infarçados, el último que ingresor",
        "start": 2307.0,
        "end": 2313.0
    },
    {
        "text": " es el primero que sale. Operaciones, uno diría, vamos de nuevo a esa",
        "start": 2313.0,
        "end": 2318.0
    },
    {
        "text": " categoría para reforzar eso de constructoras, selectoras predica, una iria, como construyo",
        "start": 2318.0,
        "end": 2324.0
    },
    {
        "text": " cualquier pila? Si me alcanza con dos operaciones, una que genera una pila vacía, o la",
        "start": 2324.0,
        "end": 2331.0
    },
    {
        "text": " llamó crear pila, depende de si quiere usar español inglés, una operación que agregue",
        "start": 2331.0,
        "end": 2336.0
    },
    {
        "text": " a pilar o push, que inserta un elemento en el tope de la pila y con eso diciendo arranca",
        "start": 2336.0,
        "end": 2342.0
    },
    {
        "text": " vacía, ando pilando, pilando, pilando, genera una pila de cualquier tamaño.",
        "start": 2342.0,
        "end": 2346.0
    },
    {
        "text": " Operaciones selectoras como inversa de esas, podría ser la operación top y pop,",
        "start": 2347.0,
        "end": 2352.0
    },
    {
        "text": " o cima de esa pila, te da el elemento último que pusiste, que está en la cima o lo borra.",
        "start": 2352.0,
        "end": 2358.0
    },
    {
        "text": " En algunas implementaciones, en algunos libros, estas dos operaciones es una sola,",
        "start": 2359.0,
        "end": 2364.0
    },
    {
        "text": " el pop borra y retorna, es una pequeña variante, y después podría tener predicados",
        "start": 2364.0,
        "end": 2370.0
    },
    {
        "text": " como si estaba así o está llena, el está llena solo de lo consideraría en que caso",
        "start": 2370.0,
        "end": 2375.0
    },
    {
        "text": " dijimos, cuando podrían este predicado, si ya pongo este predicado de qué pilas estoy",
        "start": 2375.0,
        "end": 2382.0
    },
    {
        "text": " hablando, es pilas acotadas, porque si es no acotada no tiene sentido hablar de la nación",
        "start": 2382.0,
        "end": 2387.0
    },
    {
        "text": " de esta llena, nunca va a estar llena. Implementación, voy a pasar por rápido para ver la",
        "start": 2387.0,
        "end": 2395.0
    },
    {
        "text": " estructura, pero no voy a ver si está altura el código, porque no hay nada de novedoso",
        "start": 2395.0,
        "end": 2399.0
    },
    {
        "text": " en eso, pero si reforzar la estructura que ha venido trabajado en el laborato ya,",
        "start": 2399.0,
        "end": 2403.0
    },
    {
        "text": " entonces cuando voy a implementación para una especificación, el nombre del tado siempre nos",
        "start": 2403.0,
        "end": 2409.0
    },
    {
        "text": " lo vamos a hacer aparecer acá como un puntero, una representación que no se elige cuando",
        "start": 2409.0,
        "end": 2415.0
    },
    {
        "text": " escribo el contrato, justamente para que no quede condicionado con una posible implementación.",
        "start": 2415.0,
        "end": 2420.0
    },
    {
        "text": " Simplemente dice pila va a ser un puntero, ¿verdad? ¿A qué lo va a elegir después la implementación o",
        "start": 2420.0,
        "end": 2428.0
    },
    {
        "text": " las implementaciones que yo haga de la pila? Y lo que va entonces en cada en la especificación",
        "start": 2428.0,
        "end": 2434.0
    },
    {
        "text": " son y a veces sabemos poner como el título de constructoras y que operaciones son, por ejemplo,",
        "start": 2434.0,
        "end": 2439.0
    },
    {
        "text": " el crear pila, esta si ya mire la firma me doy cuenta que es una pila acotada, porque recibe",
        "start": 2439.0,
        "end": 2445.0
    },
    {
        "text": " un entero y después la pila vacía que puede contener hasta cota elementos, ¿no? Un apilar,",
        "start": 2445.0,
        "end": 2452.0
    },
    {
        "text": " también, después tenemos selectoras una presuncima y de zapilar, fíjense que acá le pongo",
        "start": 2453.0,
        "end": 2458.0
    },
    {
        "text": " precondición, porque si esto es una pila entero, cima me da el que está arriba, me devuelve el",
        "start": 2458.0,
        "end": 2466.0
    },
    {
        "text": " elemento que está arriba, el entero que está arriba, pero si la pila va a ser, no puede inventar un",
        "start": 2466.0,
        "end": 2471.0
    },
    {
        "text": " entero, entonces pone precondición que no sea vacía y para que esa operación tenga sentido, agrego la",
        "start": 2471.0,
        "end": 2479.0
    },
    {
        "text": " categoría predicados y pongo todos los predicados que quiere después los destructores. Si no se asegura de",
        "start": 2479.0,
        "end": 2485.0
    },
    {
        "text": " tener siempre en cualquier tab, no solo en lista pila cola, estas categorías cualquier otra la puede definir",
        "start": 2485.0,
        "end": 2491.0
    },
    {
        "text": " usando estas, o sea, está demostrado que estas son las mínimas necesarias suficientes para",
        "start": 2491.0,
        "end": 2497.0
    },
    {
        "text": " implementar cualquier otra. También, entonces yo me puedo haber olvidado de alguna operación",
        "start": 2497.0,
        "end": 2503.0
    },
    {
        "text": " sofisticada de pila, pero las debería poder implementar solo con estas, la que construye, saca",
        "start": 2503.0,
        "end": 2508.0
    },
    {
        "text": " y pregunta, ¿eh? Y eso me da como tranquilidad de ser es una especificación suficiente.",
        "start": 2508.0,
        "end": 2514.0
    },
    {
        "text": " Bien, el IFNDF y el ENDF lo que hace es de alguna manera lo que está marcando este código,",
        "start": 2517.0,
        "end": 2526.0
    },
    {
        "text": " o pensar que en un desarrollo en esa aplicación puede ser que hubo uses cinco pilas, una para",
        "start": 2526.0,
        "end": 2532.0
    },
    {
        "text": " guar ahora está cogo, o sea otra para guar ahora, entonces cada una va a incluir su contrato,",
        "start": 2532.0,
        "end": 2538.0
    },
    {
        "text": " pero si hay dos que son el mismo contrato lo va a incluir dos veces. ¿Qué pasa en sea,",
        "start": 2538.0,
        "end": 2544.0
    },
    {
        "text": " o en se más mal, o en cualquier lenguaje cuando incluís un código que ya está definido te dice que",
        "start": 2544.0,
        "end": 2548.0
    },
    {
        "text": " una error lo está redefiniendo, dice esta presenta definida, entonces para que de alguna manera",
        "start": 2548.0,
        "end": 2554.0
    },
    {
        "text": " decirle al interpreteje oción ignorar este error, está bien, está el IFNDF definidos y no está",
        "start": 2554.0,
        "end": 2561.0
    },
    {
        "text": " definida, sin lo ignorarlo, es como definido en la primera vez y la siguiente vez se usalo,",
        "start": 2561.0,
        "end": 2565.0
    },
    {
        "text": " digamos, entonces uno pone las cabezeras esas, entonces un desarrollo grande, si voy a incluir",
        "start": 2565.0,
        "end": 2571.0
    },
    {
        "text": " varias veces el modelo no te va a saltar un error, te le incluye una sola vez.",
        "start": 2571.0,
        "end": 2575.0
    },
    {
        "text": " Bien, acá tenemos un ejemplo pero de nuevo no voy a entrar en código de cómo implementar esa",
        "start": 2579.0,
        "end": 2585.0
    },
    {
        "text": " pila con una regla con top, hane usado esto, ¿no? Sí, ya, una regla con un top,",
        "start": 2585.0,
        "end": 2590.0
    },
    {
        "text": " pues ya se que mi representación tenga el arreglo, el top y la cota,",
        "start": 2590.0,
        "end": 2594.0
    },
    {
        "text": " también el top es hasta donde está cargado y la cota es el maxi, la cota cuando la paso,",
        "start": 2594.0,
        "end": 2601.0
    },
    {
        "text": " cuando creo la pila vacía, hago el nune y defino la cota como el parámetro de este,",
        "start": 2601.0,
        "end": 2606.0
    },
    {
        "text": " el top lo pongo en cero y de ahí defino la memoria que tiene la regla, o sea el comienzo es como si tuviera",
        "start": 2606.0,
        "end": 2612.0
    },
    {
        "text": " toda una regla gris con el top en cero, lo veré es cuando voy agregando cada elemento,",
        "start": 2612.0,
        "end": 2618.0
    },
    {
        "text": " el que va a hacer en este caso por ejemplo una pila, bueno si la pila no está llena,",
        "start": 2618.0,
        "end": 2623.0
    },
    {
        "text": " inserta en el arreglo, en la pese un top el elemento y corre el top el siguiente,",
        "start": 2623.0,
        "end": 2629.0
    },
    {
        "text": " es decir si mire el dibujo anterior es como que citaba todo gris, se pintó desverde la pese un cero y ahora",
        "start": 2629.0,
        "end": 2636.0
    },
    {
        "text": " el top el paso acá, después insertó otro, se pintó otro verde y el top el paso acá,",
        "start": 2636.0,
        "end": 2641.0
    },
    {
        "text": " y hasta cuando puede crecer el top el hasta que llegue la cota,",
        "start": 2641.0,
        "end": 2644.0
    },
    {
        "text": " entonces para ejemplo, ahí tiene la operación, si está llena que chequea si el top es igual a la cota,",
        "start": 2645.0,
        "end": 2653.0
    },
    {
        "text": " si el top es igual a la cota entonces dirás que está llena, esto ya no tiene secreto,",
        "start": 2653.0,
        "end": 2659.0
    },
    {
        "text": " lo que me interesa más es el formato de donde van las cosas, ¿entiende?",
        "start": 2659.0,
        "end": 2664.0
    },
    {
        "text": " acá me van siguiendo bien, para ilustrar no más, esto sería una pequeña aplicación de una pila,",
        "start": 2664.0,
        "end": 2673.0
    },
    {
        "text": " como si fuera el triángulo verde, yo digo, ¡ah, voy a usar una pila! ¿Qué hago? creé una pila que tiene",
        "start": 2673.0,
        "end": 2679.0
    },
    {
        "text": " tamaño 10 y tero, hasta 5 voy apilando ese entero, después mientras no sea vacía,",
        "start": 2679.0,
        "end": 2685.0
    },
    {
        "text": " imprimo lo que está en la cima, de esa pila y al final destruyo la pila.",
        "start": 2685.0,
        "end": 2689.0
    },
    {
        "text": " Para entender qué hace este código, ¿dónde irían a mirar?",
        "start": 2690.0,
        "end": 2694.0
    },
    {
        "text": " Si tienen alguna duda, ¿no?",
        "start": 2697.0,
        "end": 2699.0
    },
    {
        "text": " El punto H de la pila, ¿qué hace crear pila? ¿Qué hace la pila?",
        "start": 2699.0,
        "end": 2705.0
    },
    {
        "text": " La preypo condición, pero no hace falta que vais a mirar el código de la pila,",
        "start": 2705.0,
        "end": 2709.0
    },
    {
        "text": " el que escribe la aplicación, sólo miraría la interfaz del módulo pila,",
        "start": 2709.0,
        "end": 2713.0
    },
    {
        "text": " que es lo que él necesita para mirar esto, entonces el diseñador o el desarrollador de aplicaciones",
        "start": 2713.0,
        "end": 2718.0
    },
    {
        "text": " dice gracias, porque no tiene que mirar los códigos de todos los módulos,",
        "start": 2719.0,
        "end": 2723.0
    },
    {
        "text": " mirar la interfaz, pues el contrato de cada módulo para hacer una aplicación.",
        "start": 2723.0,
        "end": 2727.0
    },
    {
        "text": " Y cuál es la ventaja, que no importa cómo está implementada la pila,",
        "start": 2727.0,
        "end": 2731.0
    },
    {
        "text": " si con arreglos, si con listas, lo que sea, este código debería ser general.",
        "start": 2731.0,
        "end": 2736.0
    },
    {
        "text": " Si yo cambio un arreglo por una lista de nodos, este código no debería ni tocarlo.",
        "start": 2736.0,
        "end": 2741.0
    },
    {
        "text": " Entonces, de alguna manera eso me permite en un sistema grande y el cambiando",
        "start": 2742.0,
        "end": 2746.0
    },
    {
        "text": " una implementación por otra, mejorando la eficiencia del sistema,",
        "start": 2746.0,
        "end": 2750.0
    },
    {
        "text": " sin alterar la funcionalidad del sistema, ¿sígues haciendo lo mismo?",
        "start": 2750.0,
        "end": 2754.0
    },
    {
        "text": " Sigue pasando en los mismos casos de prego de gano. ¿Soy entiendo?",
        "start": 2755.0,
        "end": 2759.0
    },
    {
        "text": " Entonces, en plítos de pila, voy a mencionar uno,",
        "start": 2762.0,
        "end": 2765.0
    },
    {
        "text": " creo que está en el práidio y el otro me voy a detener, pero este lo voy a mencionar nada más.",
        "start": 2765.0,
        "end": 2769.0
    },
    {
        "text": " Un ejemplo de una pila, dos ejemplo, ¿no?",
        "start": 2769.0,
        "end": 2772.0
    },
    {
        "text": " El primero es cuando compilo, yo digo cuando compilo uno un programa,",
        "start": 2772.0,
        "end": 2776.0
    },
    {
        "text": " un programa que es, una string grande, ¿no?",
        "start": 2776.0,
        "end": 2779.0
    },
    {
        "text": " En seis, más más, en cualquier lenguaje, ¿no?",
        "start": 2779.0,
        "end": 2782.0
    },
    {
        "text": " Que tiene indentaciones, todo, pero eso es un string.",
        "start": 2782.0,
        "end": 2785.0
    },
    {
        "text": " En ese string, un cualquier programa, ahí lo que se mancímboles de apertura y de cierre, de cosas.",
        "start": 2786.0,
        "end": 2791.0
    },
    {
        "text": " Pazcar, creo que es Bean End, ¿no?",
        "start": 2791.0,
        "end": 2794.0
    },
    {
        "text": " Sí, ¿no?",
        "start": 2795.0,
        "end": 2796.0
    },
    {
        "text": " En seis, más más, son simbolitos, ya ve que abre, ya ve que cierra, por ejemplo.",
        "start": 2797.0,
        "end": 2801.0
    },
    {
        "text": " Parentesis que abre, paréntesis que cierra, corchete que abre, corchete que cierra, ¿no?",
        "start": 2801.0,
        "end": 2805.0
    },
    {
        "text": " Entonces, lenguaje tienen aperturicierra para distintas cosas,",
        "start": 2806.0,
        "end": 2809.0
    },
    {
        "text": " para definir el alcance de una función, los parámetros de un procedimiento,",
        "start": 2809.0,
        "end": 2813.0
    },
    {
        "text": " los índices de acceso a un arreglo, ¿verdad bien?",
        "start": 2813.0,
        "end": 2817.0
    },
    {
        "text": " Entonces, algo que hace el compilador dentro de tantas cosas que hace,",
        "start": 2817.0,
        "end": 2820.0
    },
    {
        "text": " es chequearse y están bien usados a aperturicierra,",
        "start": 2820.0,
        "end": 2823.0
    },
    {
        "text": " si no te falta un símbolo de apertura, ¿no?",
        "start": 2823.0,
        "end": 2826.0
    },
    {
        "text": " Típico error que suele saltar cuando uno compila purado y se olvido de cerrar algo.",
        "start": 2826.0,
        "end": 2831.0
    },
    {
        "text": " Supongo que yo quisiera, me dan un programa, me stringrandote,",
        "start": 2831.0,
        "end": 2835.0
    },
    {
        "text": " y solo se concentran de todos los simbolitos del programa en las aperturas y cierre.",
        "start": 2835.0,
        "end": 2840.0
    },
    {
        "text": " Y supongan que dejo seis, símbolos distintos, los dos paréntesis que abre,",
        "start": 2840.0,
        "end": 2845.0
    },
    {
        "text": " los dos corchete que abre y cierre, y las dos ya ve que abre y cierre.",
        "start": 2845.0,
        "end": 2848.0
    },
    {
        "text": " Eso es seis.",
        "start": 2848.0,
        "end": 2849.0
    },
    {
        "text": " Y es como que ignoro en los puntitos e insos, como diciendo los otros caracteres,",
        "start": 2849.0,
        "end": 2853.0
    },
    {
        "text": " los ignoros, pero cuando parezca uno de esos seis, lo miro,",
        "start": 2853.0,
        "end": 2856.0
    },
    {
        "text": " para ver si están bien usados.",
        "start": 2856.0,
        "end": 2858.0
    },
    {
        "text": " Entonces, no diría a var, ¿cómo me de cuenta?",
        "start": 2858.0,
        "end": 2861.0
    },
    {
        "text": " Por ejemplo, si este está bien usado, supongan que empieza el programa,",
        "start": 2861.0,
        "end": 2863.0
    },
    {
        "text": " empieza muchos caracteres y encuentro una llave para un corchete.",
        "start": 2863.0,
        "end": 2868.0
    },
    {
        "text": " No sé, todo este está bien, está mal usado.",
        "start": 2868.0,
        "end": 2871.0
    },
    {
        "text": " Viene, ahora, después, mucho símbolo, un paréntesis que abre.",
        "start": 2871.0,
        "end": 2875.0
    },
    {
        "text": " No me de cuenta, si está bien, está mal usado.",
        "start": 2875.0,
        "end": 2878.0
    },
    {
        "text": " Ahora, si viene, una decía reaca, este, y es un paréntesis.",
        "start": 2878.0,
        "end": 2882.0
    },
    {
        "text": " Ahí puedo decir algo, ¿no?",
        "start": 2882.0,
        "end": 2884.0
    },
    {
        "text": " Aún el día sí, ese es el último que abre, diciendo bueno,",
        "start": 2884.0,
        "end": 2889.0
    },
    {
        "text": " este debería corresponder a este.",
        "start": 2889.0,
        "end": 2891.0
    },
    {
        "text": " Y si viene otra vez cierre, diciendo, ¿a ese corchete y había que ver un corchete,",
        "start": 2891.0,
        "end": 2895.0
    },
    {
        "text": " este está bien.",
        "start": 2895.0,
        "end": 2896.0
    },
    {
        "text": " Ahora, supongan que viene este.",
        "start": 2896.0,
        "end": 2899.0
    },
    {
        "text": " Abre, este abre y este cierre.",
        "start": 2899.0,
        "end": 2904.0
    },
    {
        "text": " Y compilar, ¿cómo da un error?",
        "start": 2904.0,
        "end": 2906.0
    },
    {
        "text": " ¿Qué error les parece que va a dar, por ejemplo?",
        "start": 2906.0,
        "end": 2909.0
    },
    {
        "text": " ¿Está desesperando esto?",
        "start": 2910.0,
        "end": 2912.0
    },
    {
        "text": " Ya, puede decir, ¿está desesperando este que nunca se acerró o está bien?",
        "start": 2912.0,
        "end": 2916.0
    },
    {
        "text": " Estaba esperando que este se abriera antes que este.",
        "start": 2916.0,
        "end": 2918.0
    },
    {
        "text": " O sea, hay un mensaje de error, les va a ir compilador, pero va a decir, no compila.",
        "start": 2918.0,
        "end": 2922.0
    },
    {
        "text": " Entonces, ¿cómo podría hacer esto?",
        "start": 2922.0,
        "end": 2924.0
    },
    {
        "text": " Una aplicación que cheque eso.",
        "start": 2924.0,
        "end": 2927.0
    },
    {
        "text": " Fíjense, cuando yo dije, venía lo símbolo de la partura,",
        "start": 2927.0,
        "end": 2929.0
    },
    {
        "text": " no podía decir nada.",
        "start": 2929.0,
        "end": 2931.0
    },
    {
        "text": " Porque, si todavía no sé, ¿cuándo empieza a un azabar si está bien hasta mal?",
        "start": 2931.0,
        "end": 2935.0
    },
    {
        "text": " ¿Cuándo cierran?",
        "start": 2935.0,
        "end": 2936.0
    },
    {
        "text": " Se dice, ¿a, cuando van abriendo, los voy guardando.",
        "start": 2936.0,
        "end": 2940.0
    },
    {
        "text": " Es una estructura, ¿no?",
        "start": 2940.0,
        "end": 2942.0
    },
    {
        "text": " Entonces, digo, ¿guardo este?",
        "start": 2942.0,
        "end": 2944.0
    },
    {
        "text": " ¿guardo este?",
        "start": 2944.0,
        "end": 2945.0
    },
    {
        "text": " Y ahora, bien, no descierre.",
        "start": 2945.0,
        "end": 2947.0
    },
    {
        "text": " ¿Dónde voy a mirar entre todos los que guarden?",
        "start": 2947.0,
        "end": 2950.0
    },
    {
        "text": " El último que puse.",
        "start": 2950.0,
        "end": 2952.0
    },
    {
        "text": " Una pila.",
        "start": 2952.0,
        "end": 2954.0
    },
    {
        "text": " Entonces, ¿podía de una pila donde voy apilando a los símbolos de la partura?",
        "start": 2954.0,
        "end": 2958.0
    },
    {
        "text": " Y cada vez que una descierre digo, ¿a, está en el top de la pila?",
        "start": 2958.0,
        "end": 2962.0
    },
    {
        "text": " Entonces, bien, y lo saco.",
        "start": 2962.0,
        "end": 2965.0
    },
    {
        "text": " ¿Está bien?",
        "start": 2966.0,
        "end": 2967.0
    },
    {
        "text": " Si no es que está en el top de la pila, digo, no compila.",
        "start": 2967.0,
        "end": 2969.0
    },
    {
        "text": " Si la pila estaba así, digo, no compila.",
        "start": 2969.0,
        "end": 2972.0
    },
    {
        "text": " ¿Está bien? Porque, ¿por qué?",
        "start": 2972.0,
        "end": 2974.0
    },
    {
        "text": " Si la pila estaba así, me vino en cierre,",
        "start": 2974.0,
        "end": 2976.0
    },
    {
        "text": " diciendo, ¿no abriste el que está cerrando?",
        "start": 2976.0,
        "end": 2978.0
    },
    {
        "text": " La mal.",
        "start": 2978.0,
        "end": 2979.0
    },
    {
        "text": " O sea, con una simple pila, me las pude ingeniar para chequearse",
        "start": 2979.0,
        "end": 2982.0
    },
    {
        "text": " un programa está bien balanceado, o sea, o sea, o sea,",
        "start": 2982.0,
        "end": 2986.0
    },
    {
        "text": " es decir. ¿Está bien?",
        "start": 2986.0,
        "end": 2988.0
    },
    {
        "text": " Acá tienen un ejemplo de ese pseudo-codio que chequea",
        "start": 2988.0,
        "end": 2992.0
    },
    {
        "text": " si una pila está bien balanceada, ¿no? O sea,",
        "start": 2992.0,
        "end": 2995.0
    },
    {
        "text": " a ver, lo leemos rápido a ver si coincidimos,",
        "start": 2995.0,
        "end": 2998.0
    },
    {
        "text": " construye un estaco vacío, si la lista de símbolos que es mi programa,",
        "start": 2998.0,
        "end": 3003.0
    },
    {
        "text": " no es vacía, obtengo el primer elemento.",
        "start": 3003.0,
        "end": 3005.0
    },
    {
        "text": " Si es un símbolo de la partura, no puedo decir nada,",
        "start": 3005.0,
        "end": 3008.0
    },
    {
        "text": " lo agregó el estaco.",
        "start": 3008.0,
        "end": 3009.0
    },
    {
        "text": " No puedo decir que esté mal, eso lo que quiero decir, ¿no?",
        "start": 3009.0,
        "end": 3012.0
    },
    {
        "text": " Ahora, si viene un símbolo de clausura de cierre, digo, a momento,",
        "start": 3012.0,
        "end": 3016.0
    },
    {
        "text": " vamos a ver.",
        "start": 3016.0,
        "end": 3017.0
    },
    {
        "text": " Primero, miro, uno está tentado decir, andad mirar el top de el estaco.",
        "start": 3017.0,
        "end": 3021.0
    },
    {
        "text": " Pero si el estaco está vacío, estoy violando la precondición.",
        "start": 3021.0,
        "end": 3024.0
    },
    {
        "text": " Estudio, no. Primero, chiqués si está vacío.",
        "start": 3024.0,
        "end": 3027.0
    },
    {
        "text": " Estudio, mira, si.",
        "start": 3027.0,
        "end": 3028.0
    },
    {
        "text": " Te viene uno del cierre y el estaco está vacío, no está balanceado.",
        "start": 3028.0,
        "end": 3032.0
    },
    {
        "text": " Y un mensaje de error podría ser, está cerrando algo que nunca orió.",
        "start": 3032.0,
        "end": 3036.0
    },
    {
        "text": " Porque el estaco está vacío, la partura no está.",
        "start": 3036.0,
        "end": 3039.0
    },
    {
        "text": " Ahora, si no está vacío y entro acá,",
        "start": 3039.0,
        "end": 3042.0
    },
    {
        "text": " ahí sí, miro, ¿cuál es el símbolo? A ver si coincide.",
        "start": 3042.0,
        "end": 3046.0
    },
    {
        "text": " El desierre es corchete.",
        "start": 3046.0,
        "end": 3048.0
    },
    {
        "text": " El que está en el top de la pila es corchete, bien, si no está mal.",
        "start": 3048.0,
        "end": 3052.0
    },
    {
        "text": " Entonces, digo, bueno, si no corresponde, digo, no está balanceada.",
        "start": 3052.0,
        "end": 3058.0
    },
    {
        "text": " Ahí le puedo decir, estaba esperando, el que está en el top de el estaco",
        "start": 3058.0,
        "end": 3062.0
    },
    {
        "text": " o faltó este, el mensaje de quiera.",
        "start": 3062.0,
        "end": 3064.0
    },
    {
        "text": " Y si no, digo, así coincide.",
        "start": 3064.0,
        "end": 3067.0
    },
    {
        "text": " Y si coincide que hago, lo saco el estaco, yo lo chequé.",
        "start": 3067.0,
        "end": 3070.0
    },
    {
        "text": " Y sigo analizando.",
        "start": 3070.0,
        "end": 3072.0
    },
    {
        "text": " Cuando sigo analizando y termina la lista, que tendría que pasar con el estaco.",
        "start": 3072.0,
        "end": 3076.0
    },
    {
        "text": " Me tendría que haber vacío. Porque si me quedan algunos de la partura,",
        "start": 3076.0,
        "end": 3080.0
    },
    {
        "text": " ¿cuál sería la situación?",
        "start": 3080.0,
        "end": 3082.0
    },
    {
        "text": " No, son las cosas.",
        "start": 3082.0,
        "end": 3084.0
    },
    {
        "text": " ¿Qué hay cosas que no se cerraron? No se abrió ni nunca se cerraron.",
        "start": 3084.0,
        "end": 3087.0
    },
    {
        "text": " Este recorre una sola vela lista y una estaco",
        "start": 3087.0,
        "end": 3091.0
    },
    {
        "text": " y permite saber si un programa usa bien los símbolos de la parturiciar.",
        "start": 3091.0,
        "end": 3095.0
    },
    {
        "text": " Un segundo ejemplo que me pareció un poquito más interesante",
        "start": 3095.0,
        "end": 3099.0
    },
    {
        "text": " para bajar a tierra la idea de la estaco de ejecución.",
        "start": 3099.0,
        "end": 3102.0
    },
    {
        "text": " Este de un pseudo-codio se parecia siempre, no es si.",
        "start": 3103.0,
        "end": 3106.0
    },
    {
        "text": " Está robado de algún lado ese código.",
        "start": 3106.0,
        "end": 3108.0
    },
    {
        "text": " Ya ni sé dónde.",
        "start": 3108.0,
        "end": 3110.0
    },
    {
        "text": " Supongo que se que tengo dos funciones f y g.",
        "start": 3110.0,
        "end": 3114.0
    },
    {
        "text": " F tiene dos parámetros enteros x y una variable local.",
        "start": 3114.0,
        "end": 3119.0
    },
    {
        "text": " Y en algún momento llama a g.",
        "start": 3119.0,
        "end": 3122.0
    },
    {
        "text": " La función g tiene un parámetro z, dos variables locales,",
        "start": 3122.0,
        "end": 3126.0
    },
    {
        "text": " pecu y en algún momento llama a f.",
        "start": 3126.0,
        "end": 3128.0
    },
    {
        "text": " No está todo el código.",
        "start": 3128.0,
        "end": 3130.0
    },
    {
        "text": " Yo estoy diciendo lo que me importa para la explicación que voy a dar.",
        "start": 3130.0,
        "end": 3134.0
    },
    {
        "text": " Supongo que hace que te dibujito que es de estar que de ejecución es",
        "start": 3134.0,
        "end": 3136.0
    },
    {
        "text": " está todo vacío, sabe no hay nada.",
        "start": 3136.0,
        "end": 3139.0
    },
    {
        "text": " Todavía es como si tuviera parado acá.",
        "start": 3139.0,
        "end": 3141.0
    },
    {
        "text": " Y lo que está arriba no está.",
        "start": 3141.0,
        "end": 3144.0
    },
    {
        "text": " Yo desde el main y ya me voy a f.",
        "start": 3144.0,
        "end": 3146.0
    },
    {
        "text": " Yo me pienso ejecutar f con cierto valor para x y y.",
        "start": 3146.0,
        "end": 3150.0
    },
    {
        "text": " Empece ejecutar y en un momento llama a g.",
        "start": 3150.0,
        "end": 3153.0
    },
    {
        "text": " Recuerden que así el sistema cuando una un programa llama otro",
        "start": 3153.0,
        "end": 3157.0
    },
    {
        "text": " le da el control a ese otro pero guardaba algo en el stack,",
        "start": 3157.0,
        "end": 3163.0
    },
    {
        "text": " la dirección de retorno que nos llamaba.",
        "start": 3163.0,
        "end": 3166.0
    },
    {
        "text": " Bueno guarda algo más que la dirección de retorno.",
        "start": 3166.0,
        "end": 3169.0
    },
    {
        "text": " Es como diciendo cuando la f llama a la g le vas a sacar una foto a la f.",
        "start": 3169.0,
        "end": 3174.0
    },
    {
        "text": " Antes de darle el control a g diciendo tomado el control les saco una foto a la f.",
        "start": 3174.0,
        "end": 3178.0
    },
    {
        "text": " Esa foto es lo que está acá selecto.",
        "start": 3178.0,
        "end": 3181.0
    },
    {
        "text": " Es este frame.",
        "start": 3181.0,
        "end": 3183.0
    },
    {
        "text": " Este frame que tiene la foto.",
        "start": 3184.0,
        "end": 3186.0
    },
    {
        "text": " ¿Cuánto vale los parámetros x y de la f antes de que me vas?",
        "start": 3186.0,
        "end": 3191.0
    },
    {
        "text": " Lo haría en el local, lo valores x y el parámetro a y la dirección de retorno.",
        "start": 3191.0,
        "end": 3198.0
    },
    {
        "text": " Le saco la foto, la dejo en el stack y le digo ahora g toma el control de los registros de la máquina.",
        "start": 3198.0,
        "end": 3204.0
    },
    {
        "text": " Se ejecutando vos.",
        "start": 3204.0,
        "end": 3206.0
    },
    {
        "text": " Empece ejecutar la g.",
        "start": 3206.0,
        "end": 3208.0
    },
    {
        "text": " Ahora si otra cosa y llama la f.",
        "start": 3208.0,
        "end": 3210.0
    },
    {
        "text": " ¿Qué pasa ahora entonces?",
        "start": 3210.0,
        "end": 3212.0
    },
    {
        "text": " Cuando g llama f.",
        "start": 3212.0,
        "end": 3213.0
    },
    {
        "text": " De saco una foto a la g antes de darle el control a la f.",
        "start": 3213.0,
        "end": 3217.0
    },
    {
        "text": " Foto amarilla.",
        "start": 3217.0,
        "end": 3219.0
    },
    {
        "text": " Foto amarilla porque tiene el valor de z, los parámetros, los parores locales peicú,",
        "start": 3219.0,
        "end": 3224.0
    },
    {
        "text": " el valor de retorno, lo guarda acá.",
        "start": 3224.0,
        "end": 3226.0
    },
    {
        "text": " Empece ejecutar f y suponganse una vez más.",
        "start": 3226.0,
        "end": 3230.0
    },
    {
        "text": " Hace no sé qué y llama a g.",
        "start": 3230.0,
        "end": 3232.0
    },
    {
        "text": " Otra foto.",
        "start": 3232.0,
        "end": 3234.0
    },
    {
        "text": " Otra foto celeste porque es una foto de f.",
        "start": 3234.0,
        "end": 3237.0
    },
    {
        "text": " Foto amarilla de g.",
        "start": 3237.0,
        "end": 3240.0
    },
    {
        "text": " X y a parámetro local.",
        "start": 3240.0,
        "end": 3243.0
    },
    {
        "text": " Me freno ahí.",
        "start": 3243.0,
        "end": 3244.0
    },
    {
        "text": " La verdad, pero no he sido termina porque no está todo el código ahí.",
        "start": 3244.0,
        "end": 3248.0
    },
    {
        "text": " Pero si les voy a preguntar esto.",
        "start": 3248.0,
        "end": 3251.0
    },
    {
        "text": " Uno supone que los valores de X y a acá y acá son los mismos.",
        "start": 3251.0,
        "end": 3257.0
    },
    {
        "text": " Si fuera los mismos, ¿qué estarían pensando?",
        "start": 3257.0,
        "end": 3262.0
    },
    {
        "text": " Si la foto de los valores de X y a arriba y abajo son los mismos.",
        "start": 3262.0,
        "end": 3269.0
    },
    {
        "text": " ¿Y estaría pensando que esto no está avanzando?",
        "start": 3269.0,
        "end": 3273.0
    },
    {
        "text": " Esto no va a terminar.",
        "start": 3273.0,
        "end": 3275.0
    },
    {
        "text": " Porque se llama, se llama, si tú sigas así, esto no converge.",
        "start": 3275.0,
        "end": 3279.0
    },
    {
        "text": " Se sería muy sospechoso que los valores de X y en esta llamada y en aquello llamas,",
        "start": 3279.0,
        "end": 3284.0
    },
    {
        "text": " se llama a lo mismo.",
        "start": 3284.0,
        "end": 3285.0
    },
    {
        "text": " ¿Pas bien?",
        "start": 3285.0,
        "end": 3287.0
    },
    {
        "text": " Y ahí uno capaz que no se inolecalló la fichita de cómo se va a terminar.",
        "start": 3287.0,
        "end": 3291.0
    },
    {
        "text": " ¿Cómo funciona la recorción?",
        "start": 3291.0,
        "end": 3293.0
    },
    {
        "text": " Acales, debería terminar de caer la fichita.",
        "start": 3293.0,
        "end": 3295.0
    },
    {
        "text": " Porque viene cuando una tina, una función recurcida sobre un árbol T o una lista L y ese recorción.",
        "start": 3295.0,
        "end": 3302.0
    },
    {
        "text": " Y cuando volve a llamar, ¿el llamar recurcido?",
        "start": 3302.0,
        "end": 3305.0
    },
    {
        "text": " Calza en la misma variable T o L. Es como que tengo muchas T o L.",
        "start": 3305.0,
        "end": 3310.0
    },
    {
        "text": " ¿No? Porque cuando pensamos un árbol parámetro T de Trim y llamo con T izquierdo, recurcido.",
        "start": 3310.0,
        "end": 3317.0
    },
    {
        "text": " Te izquierdo calzante.",
        "start": 3317.0,
        "end": 3320.0
    },
    {
        "text": " Es como que hay dos T entonces.",
        "start": 3320.0,
        "end": 3323.0
    },
    {
        "text": " ¿No? Y después hay otra T y después ¿y dónde guarda toda la T?",
        "start": 3323.0,
        "end": 3327.0
    },
    {
        "text": " Cada fotito es una instancia distinta, por eso no se confunde.",
        "start": 3327.0,
        "end": 3332.0
    },
    {
        "text": " Y por eso cada valor en cada instancia tiene su sentido, su contexto.",
        "start": 3332.0,
        "end": 3337.0
    },
    {
        "text": " Para no perderlo lo que hace la máquina es guardar.",
        "start": 3337.0,
        "end": 3340.0
    },
    {
        "text": " Es una pila sí, es una pila, pero cada elementito de la pila es la que hacemos un frame, una foto.",
        "start": 3340.0,
        "end": 3346.0
    },
    {
        "text": " El tamaño de la foto no es lo mismo para cualquier función, porque depende cuantos parámetros tenga y cuantos variables locales tenga.",
        "start": 3347.0,
        "end": 3354.0
    },
    {
        "text": " Esa es la foto.",
        "start": 3354.0,
        "end": 3355.0
    },
    {
        "text": " Los valores globales no se guardan acá, porque lo global sí cambia para todo.",
        "start": 3355.0,
        "end": 3360.0
    },
    {
        "text": " Entonces sí, todo lo que es contexto local. Parámetros y valores locales.",
        "start": 3360.0,
        "end": 3365.0
    },
    {
        "text": " ¿Sentiendes? Bueno, así simplemente la esta que ejecución es la máquina usando una Ray con Toppe.",
        "start": 3365.0,
        "end": 3370.0
    },
    {
        "text": " Donde cada elemento es un bloque.",
        "start": 3371.0,
        "end": 3373.0
    },
    {
        "text": " El tamaño del bloque se determina cuando yo compilo una función, leo los argumentos, digo,",
        "start": 3373.0,
        "end": 3380.0
    },
    {
        "text": " ah, recibe tres centeros, tantos bytes, después tiene tales variables declaradas locales adentro, tantos bytes.",
        "start": 3380.0,
        "end": 3388.0
    },
    {
        "text": " Y para dirección de retorno, dejo siempre un espacio fijo. Es una dirección de la máquina.",
        "start": 3388.0,
        "end": 3394.0
    },
    {
        "text": " Y ahí le termina cada vez que le saca una foto de esa función, que tamaño va a tener su frame.",
        "start": 3394.0,
        "end": 3398.0
    },
    {
        "text": " Una etaria de compiladores a veces es implementar el extraque de ejecución de la máquina.",
        "start": 3400.0,
        "end": 3406.0
    },
    {
        "text": " Cuando digo push y pop, acá me refiero a una foto. Lo que pongo y saco es una foto entera.",
        "start": 3408.0,
        "end": 3413.0
    },
    {
        "text": " Cuando termina la ejecución y se da aquí le toca el turno. Saco la foto de lo que está en el top digo, restituyo eso en los registros de la máquina, se dije que gustan nuevos.",
        "start": 3414.0,
        "end": 3422.0
    },
    {
        "text": " Saco, la foto actual. ¿Por qué tiene más la foto? Y pues lo registra la máquina son finitos y si yo no saco una foto, me la guardara,",
        "start": 3423.0,
        "end": 3431.0
    },
    {
        "text": " no le puedo dar los control de lo registra la máquina para que los use para otra cosa.",
        "start": 3431.0,
        "end": 3435.0
    },
    {
        "text": " Me los puede perder, me los puede cambiar. Lo único que le uno deja, bueno, te dejo cambiar lo toque de algo, si es global.",
        "start": 3436.0,
        "end": 3441.0
    },
    {
        "text": " Porque entonces si es global cuando saiga, bueno, ¿vo? decide cambiarlo que ha cambiado. ¿Entiende?",
        "start": 3441.0,
        "end": 3446.0
    },
    {
        "text": " Vamos a acá les dejo algunos códigos de referencia pero no son nada novidoso de la pila que sea algún ejemplo más.",
        "start": 3447.0,
        "end": 3453.0
    },
    {
        "text": " Voy a centrar ahora en otra de las variantes que es la idea de cola y este es un poquito más interesante.",
        "start": 3454.0,
        "end": 3460.0
    },
    {
        "text": " Una cola también es una lista con una política ingreso y gresos más restringida pero que uno diría que tiene un poco más de usos, prácticos, ¿no?",
        "start": 3461.0,
        "end": 3469.0
    },
    {
        "text": " Porque representa la una de las variantes de una fila, de espera. Como la fila es un supermercado, la fila de espera de una lista de huele,",
        "start": 3469.0,
        "end": 3477.0
    },
    {
        "text": " o sea, el primero en llegar es el primero en ser atendido, es la política, ¿no? Farsi, Farsi, au.",
        "start": 3477.0,
        "end": 3483.0
    },
    {
        "text": " Parece como más útil. Entonces uno diría, ya la dibuja así, fíjense, si esto es una fila, si los elementos ingresan por acá,",
        "start": 3483.0,
        "end": 3490.0
    },
    {
        "text": " una diría, hacer la fila y salir por acá. Pero ya no podés salir por el mismo extremo que ingresaste porque sería como muy injusto, ¿no?",
        "start": 3490.0,
        "end": 3498.0
    },
    {
        "text": " El último que se ve igual, primero que atiende, hacen eso en la cantina y los sacan para fuera. ¿Vale?",
        "start": 3498.0,
        "end": 3503.0
    },
    {
        "text": " ¿Me acuerdo? La especificación no diría, es muy similar el contrato. La única diferencia es que agrego por un extremo y saco por el otro.",
        "start": 3504.0,
        "end": 3513.0
    },
    {
        "text": " Las constructor y selectoras hablan de extremos distintos, la única diferencia. Y capaz la terminología que uno usa para agregar, que en vez de decir apilar o push, les llama en cuevo o en colar, por ejemplo.",
        "start": 3514.0,
        "end": 3526.0
    },
    {
        "text": " Pero el nombre es simbólico, lo que importa es la poscondición. Entonces si el en colar agrega un elemento al final de la cola, cuando yo obtengo, o borro, el elemento que le toca el turno, que hablo, hablo del comienzo de la cola.",
        "start": 3526.0,
        "end": 3541.0
    },
    {
        "text": " Entonces el otro extremo. Otra posibilidad de especificar el comportamiento entre las constructor y selectoras, es decir, el agrega, ¿sabes qué? Agrega, no te digo dónde.",
        "start": 3542.0,
        "end": 3553.0
    },
    {
        "text": " Pero el que atiende, que debería decir, el que dice borra o obtiene el elemento, ¿cómo sabe? Si, el que agregó no me dijo nada, el que va a obtener para respetar fijo, que debería decir.",
        "start": 3553.0,
        "end": 3564.0
    },
    {
        "text": " Obtiene o borra que? ¿Cómo lo dirían?",
        "start": 3565.0,
        "end": 3571.0
    },
    {
        "text": " Ya no puedo decir el que está en el otro extremo, porque no hablé de extremo cuando hiciste. Entonces qué podría decir?",
        "start": 3572.0,
        "end": 3581.0
    },
    {
        "text": " El primero que agregue. El más antiguo, ¿dígamos? Podría decir, agregar no dice nada, pero el obtener y el borra dice, obtiene o borra el primero ingresado, o el más antiguo presente, ¿cómo quieran llamarlo?",
        "start": 3581.0,
        "end": 3597.0
    },
    {
        "text": " Pero es muy común hablar de extremo, insertar el final, sacar el comienzo, entonces ahí también estoy marcando los extremos.",
        "start": 3598.0,
        "end": 3606.0
    },
    {
        "text": " Bien, hay muchas variantes de esta idea de cola, les voy a poner algunos ejemplos, por más que vamos a trabajar con esta por ahora está simple.",
        "start": 3608.0,
        "end": 3616.0
    },
    {
        "text": " Por ejemplo, la cola de la impresora. Una cola de impresora se parece este dibujito, pero es muy común, porque uno dice mando un trabajo imprimir.",
        "start": 3616.0,
        "end": 3626.0
    },
    {
        "text": " También, y si mando varios, vas a sacar primero el primero que llegó a esa estructura de cola. ¿Por qué usa una cola o una estructura? Porque pueden mandar muchos trabajos y si no se van a perder, no están rarviando el impresora.",
        "start": 3626.0,
        "end": 3640.0
    },
    {
        "text": " También tú pagas no se pierda, lo almacena y después lo va a procesar. Y lo procesen ahora donde llegada. Ahora, ¿qué se le pasar muy habitualmente? ¿Qué uno?",
        "start": 3640.0,
        "end": 3649.0
    },
    {
        "text": " O mando dos veces un mismo trabajo, o mando un trabajo equivocado, entonces qué lo que hace.",
        "start": 3649.0,
        "end": 3653.0
    },
    {
        "text": " ¿Para no? ¿Eh?",
        "start": 3656.0,
        "end": 3657.0
    },
    {
        "text": " Cancelar, entonces digo, ah, voy a cancelar un trabajo que está acá, para mí en el medio.",
        "start": 3657.0,
        "end": 3661.0
    },
    {
        "text": " Entonces ya agrega como una operación extra, no es una típica de cola, no? Tengo un cancelar como un borrar generico.",
        "start": 3662.0,
        "end": 3669.0
    },
    {
        "text": " Un remover que me permite remover, no necesariamente el primero que ingresó, sino un arbitrario.",
        "start": 3670.0,
        "end": 3676.0
    },
    {
        "text": " Entonces ya es una variante, ya es un contrato poquito distinta, obtiene una operación más, un remover.",
        "start": 3676.0,
        "end": 3682.0
    },
    {
        "text": " Se entiende otra variante podría ser un procesador, penséme en un procesador al cual varios procesos le piden cosas.",
        "start": 3682.0,
        "end": 3695.0
    },
    {
        "text": " Podría ser multi procesador, ¿no? Pero entonces de nuevo, como muchos procesos le pueden quedar algo un procesador,",
        "start": 3695.0,
        "end": 3701.0
    },
    {
        "text": " los tiene que almacenar los pedidos para no perder ninguno y después tendrá lo, una diría, en qué orden los atiende.",
        "start": 3701.0,
        "end": 3707.0
    },
    {
        "text": " Es razonable que los atiendan en una política de cola, el primero que lo pide es el primero que lo usa.",
        "start": 3708.0,
        "end": 3714.0
    },
    {
        "text": " ¿Qué piensan? Atender así los procesos un procesador, el sistema operativo, tiene prioridades.",
        "start": 3715.0,
        "end": 3724.0
    },
    {
        "text": " Aparece la idea de no, no es tan importante el orden de llegas, sino más bien quienes es más importante.",
        "start": 3725.0,
        "end": 3731.0
    },
    {
        "text": " Aparece en procesos más urgentes que otros y ya hay que hablar de colas de prioridad.",
        "start": 3731.0,
        "end": 3735.0
    },
    {
        "text": " Una variante, te vamos a ver después más adelante en el curso.",
        "start": 3735.0,
        "end": 3739.0
    },
    {
        "text": " Entonces atiendo siempre el más importante. Ahora pensemos una cosa.",
        "start": 3739.0,
        "end": 3743.0
    },
    {
        "text": " Si digo, llegan varios procesos y hay una prioridad, un numerito, que le marca la importancia del proceso.",
        "start": 3743.0,
        "end": 3751.0
    },
    {
        "text": " Si el presador atiende siempre al más importante, es justo eso, funcionará bien eso. ¿Qué puede pasar?",
        "start": 3752.0,
        "end": 3760.0
    },
    {
        "text": " Que algún proceso que despera por mucho tiempo, lo que se suele llamar la muerte, por inanimación,",
        "start": 3764.0,
        "end": 3770.0
    },
    {
        "text": " también pobre, aquí le comer y nunca llega, porque siempre se le cuela uno más importante.",
        "start": 3770.0,
        "end": 3776.0
    },
    {
        "text": " Entonces, ¿qué puede hacer un sistema operativo? ¿Por estar esperando en la cola?",
        "start": 3777.0,
        "end": 3782.0
    },
    {
        "text": " Le voy aumentando en la prioridad. ¿Estás esperando? ¿Estás esperando?",
        "start": 3783.0,
        "end": 3788.0
    },
    {
        "text": " Hasta que un momento, por más que llegue uno de máxima prioridad,",
        "start": 3788.0,
        "end": 3792.0
    },
    {
        "text": " este espero tanto que tiene un número más grande que el otro. Entonces lo atiende primero ahí.",
        "start": 3792.0,
        "end": 3796.0
    },
    {
        "text": " Entonces eso evita lo que se llama la posición indefinida, que es un proceso que es esperando indefinidamente.",
        "start": 3796.0,
        "end": 3803.0
    },
    {
        "text": " Vean que hay muchas variantes, ¿no? Y ¿qué pasa ahora? ¿No?",
        "start": 3804.0,
        "end": 3808.0
    },
    {
        "text": " Si, igual hay dos de las mismas prioridades, ¿quién atiende primero?",
        "start": 3808.0,
        "end": 3811.0
    },
    {
        "text": " Ahí puede ser que se empate por hora de enfifo, el primero que llegó.",
        "start": 3813.0,
        "end": 3817.0
    },
    {
        "text": " Tú puedes hacer una lógica tan complicada como yo quiero. ¿También?",
        "start": 3817.0,
        "end": 3821.0
    },
    {
        "text": " Otro ejemplo, de uso de colas, ¿no? Un banco, un supermercado.",
        "start": 3821.0,
        "end": 3828.0
    },
    {
        "text": " ¿Es cierto que voy a cualquier horario y me atienden de igual de rápido?",
        "start": 3829.0,
        "end": 3833.0
    },
    {
        "text": " No. ¿Qué me gustaría si yo fuera el dueño de un supermercado en banco o lo que sea?",
        "start": 3834.0,
        "end": 3839.0
    },
    {
        "text": " Una política de marketing podría ser venir a mi local y te aseguro que vas a ser atendido en el sumo",
        "start": 3839.0,
        "end": 3845.0
    },
    {
        "text": " X minutos. Para asegurar eso, te llena en cuenta que la gente no va en todos los días a los horarios,",
        "start": 3846.0,
        "end": 3853.0
    },
    {
        "text": " la misma frecuencia que harían. Si son dueños de un supermercado.",
        "start": 3854.0,
        "end": 3858.0
    },
    {
        "text": " Para asegurar que esa política se respeta de que no tiene que esperar más de tantos minutos.",
        "start": 3859.0,
        "end": 3863.0
    },
    {
        "text": " Bien, estudiarlo donde hay más pico de asistencia y abrir más cajas para elilizas.",
        "start": 3868.0,
        "end": 3874.0
    },
    {
        "text": " Ponés más colas en paralelo. Más personal y seso, ¿no? Más colas de atención.",
        "start": 3874.0,
        "end": 3880.0
    },
    {
        "text": " Y cuando hay menos zarra para no parar de plata de tanto sueldo y tenés menos.",
        "start": 3881.0,
        "end": 3885.0
    },
    {
        "text": " Entonces, ahí viene como una política también de paralizar.",
        "start": 3885.0,
        "end": 3888.0
    },
    {
        "text": " Entonces hay muchas variantes que me pueden llevar a optimizar procesos de atención a usuario.",
        "start": 3889.0,
        "end": 3894.0
    },
    {
        "text": " Y si se llama muchas de estas variantes de mat teoría de colas, ¿no?",
        "start": 3895.0,
        "end": 3898.0
    },
    {
        "text": " Investigación operativa y en curso de IO, instrucción de investigación de operaciones, ven algo de esto.",
        "start": 3898.0,
        "end": 3903.0
    },
    {
        "text": " Hay muchas variantes y libros entero, escrito de variantes porque simulas en situaciones de realidad.",
        "start": 3904.0,
        "end": 3909.0
    },
    {
        "text": " Entonces, la pregunta es cómo les implementa eficientemente.",
        "start": 3909.0,
        "end": 3912.0
    },
    {
        "text": " Acá vamos a ver, por ahora las colas comunes sin prioridad y vamos a ver la de prioridad, pero hay otras variantes más.",
        "start": 3912.0,
        "end": 3918.0
    },
    {
        "text": " Bien, ¿cómo implemento esto? No tiene mucho secreto.",
        "start": 3920.0,
        "end": 3923.0
    },
    {
        "text": " Hay dos extremos. Quiero insertar y borrar por todo este. ¿Qué estructura usarían?",
        "start": 3924.0,
        "end": 3928.0
    },
    {
        "text": " Eficiente.",
        "start": 3931.0,
        "end": 3932.0
    },
    {
        "text": " ¿Qué estáis?",
        "start": 3932.0,
        "end": 3933.0
    },
    {
        "text": " Una lista con cabeza, decís vos, ¿qué guardas en el cabeza?",
        "start": 3938.0,
        "end": 3941.0
    },
    {
        "text": " El inicio del final.",
        "start": 3942.0,
        "end": 3943.0
    },
    {
        "text": " Justamente, diciendo, bueno, ¿vo quería hacer cosas en los extremos para que insertemos la voz y salgan por el otro?",
        "start": 3944.0,
        "end": 3949.0
    },
    {
        "text": " Bueno, en tu cabeza, al llevarte los punteros los extremos, pero no tienes que recorrar la estructura.",
        "start": 3949.0,
        "end": 3954.0
    },
    {
        "text": " Entonces vas a poder agregar y sacar en orden 1.",
        "start": 3954.0,
        "end": 3957.0
    },
    {
        "text": " Está bien.",
        "start": 3958.0,
        "end": 3959.0
    },
    {
        "text": " Y bueno, ya me he ido trabajando con algo de eso.",
        "start": 3959.0,
        "end": 3961.0
    },
    {
        "text": " Entonces, los códigos de esto no deberían ser difíciles.",
        "start": 3961.0,
        "end": 3969.0
    },
    {
        "text": " Vamos a mirar 1 como para ver un detalle nada más.",
        "start": 3969.0,
        "end": 3971.0
    },
    {
        "text": " Supongo que se dio, mira, voy a llevar este cabezal que lleva primero y último.",
        "start": 3972.0,
        "end": 3976.0
    },
    {
        "text": " Dos punteros, ¿no? Sería puntero a este nodo y puntero a este.",
        "start": 3976.0,
        "end": 3980.0
    },
    {
        "text": " Yo agrego acá en el último y saco por el principio.",
        "start": 3980.0,
        "end": 3985.0
    },
    {
        "text": " Mi representación, lo que va a tener es, primero y último puntero nodo, incluso el nodo puede ser simple encadenado.",
        "start": 3986.0,
        "end": 3992.0
    },
    {
        "text": " No, no necesito que sea doble encadenado.",
        "start": 3992.0,
        "end": 3994.0
    },
    {
        "text": " ¿Qué hace el crear cola? Bueno, genera el nodo cabezera o como dijiste, ¿no?",
        "start": 3995.0,
        "end": 4002.0
    },
    {
        "text": " Cabezal.",
        "start": 4002.0,
        "end": 4003.0
    },
    {
        "text": " Cabezal.",
        "start": 4003.0,
        "end": 4004.0
    },
    {
        "text": " Y le pone primero y último nul.",
        "start": 4004.0,
        "end": 4007.0
    },
    {
        "text": " Diciendo, al comienzo, cuando es vacío, genera el cabezal, pero con nul en primero y último.",
        "start": 4007.0,
        "end": 4012.0
    },
    {
        "text": " Y que hace, por ejemplo, el encolar y uno diría, lo agrega al final.",
        "start": 4013.0,
        "end": 4017.0
    },
    {
        "text": " Uniría, es un código de orden 1, pero hay que tener cuidado a los casos de borde. ¿Cuál es el caso de borde?",
        "start": 4017.0,
        "end": 4023.0
    },
    {
        "text": " ¿Cuándo es vacío? Porque ahí el primero y último pasa a ser el único elemento que voy a agregar.",
        "start": 4024.0,
        "end": 4030.0
    },
    {
        "text": " Y si ya había elementos donde agrego.",
        "start": 4030.0,
        "end": 4033.0
    },
    {
        "text": " Al final, pero el primero no se mueve.",
        "start": 4034.0,
        "end": 4036.0
    },
    {
        "text": " Entonces ahí unif, ahí unif.",
        "start": 4036.0,
        "end": 4038.0
    },
    {
        "text": " Eseif que está puesto acá, ¿no?",
        "start": 4039.0,
        "end": 4040.0
    },
    {
        "text": " Genera el nodito que va a ir al final, por eso el siguiente nul, pero dice si el primero era nul,",
        "start": 4040.0,
        "end": 4046.0
    },
    {
        "text": " ahora el primero también pasa a ser el nuevo, el en el único caso.",
        "start": 4046.0,
        "end": 4049.0
    },
    {
        "text": " Ahora sí no, ese nador opongo como siguiente el último y muevo el último, ese nador.",
        "start": 4049.0,
        "end": 4055.0
    },
    {
        "text": " Todo ese código es orden 1, porque no hay un wild, no hay una recurción.",
        "start": 4055.0,
        "end": 4061.0
    },
    {
        "text": " No tengo que recorrer las estructuras.",
        "start": 4061.0,
        "end": 4062.0
    },
    {
        "text": " Simplemente tengo que cuidar el caso de borde, lo mismo en el caso de desencolar.",
        "start": 4063.0,
        "end": 4068.0
    },
    {
        "text": " Una variante.",
        "start": 4069.0,
        "end": 4070.0
    },
    {
        "text": " En el caso de una pila, si está cotada podemos usar un arreglo con un top.",
        "start": 4072.0,
        "end": 4078.0
    },
    {
        "text": " Y en P1 ya la venía usando el arreglo con top.",
        "start": 4079.0,
        "end": 4082.0
    },
    {
        "text": " Este dibujito que está acá.",
        "start": 4082.0,
        "end": 4084.0
    },
    {
        "text": " Una arreglo con un top que diga hasta donde cargue.",
        "start": 4086.0,
        "end": 4089.0
    },
    {
        "text": " Eso en una pila funciona bien.",
        "start": 4090.0,
        "end": 4092.0
    },
    {
        "text": " Digo, vamos a adaptarla a una cola acotada, porque si no es acotada se me complica.",
        "start": 4092.0,
        "end": 4096.0
    },
    {
        "text": " Podría usar para la cola acotada la lista que teníamos recién que dijo él con un contador en la representación y ya está.",
        "start": 4097.0,
        "end": 4103.0
    },
    {
        "text": " Dejó que el contador crezca hasta ese valor y no déjame insertar más.",
        "start": 4106.0,
        "end": 4109.0
    },
    {
        "text": " También ya está, ya no haría falta esto.",
        "start": 4109.0,
        "end": 4111.0
    },
    {
        "text": " Ahora, ¿por qué esto tiene ventajas? Porque esto usarme memoria contiguas es un poquito más eficiente,",
        "start": 4112.0,
        "end": 4118.0
    },
    {
        "text": " que evito usar punteros que tienen un poquito más de tiempo de ejecución, riesgo de seguridad, etcétera.",
        "start": 4118.0,
        "end": 4125.0
    },
    {
        "text": " Me gustaría adaptar la pila o la arreglo con top.",
        "start": 4125.0,
        "end": 4130.0
    },
    {
        "text": " ¿Cómo la adaptaría para una cola?",
        "start": 4130.0,
        "end": 4132.0
    },
    {
        "text": " Me siguen.",
        "start": 4133.0,
        "end": 4134.0
    },
    {
        "text": " Ahora, si lo sigo con este dibujito.",
        "start": 4135.0,
        "end": 4137.0
    },
    {
        "text": " Supongo que voy a insertar entonces inserto acá en el top, como al final.",
        "start": 4138.0,
        "end": 4142.0
    },
    {
        "text": " El tema es que cuando voy a borrar, donde debería borrar para respetarla la política de cola.",
        "start": 4143.0,
        "end": 4148.0
    },
    {
        "text": " En el cero.",
        "start": 4150.0,
        "end": 4151.0
    },
    {
        "text": " Y si borrar en el cero deberías shiftar todo para arriba.",
        "start": 4152.0,
        "end": 4155.0
    },
    {
        "text": " Ya eso no es orden 1.",
        "start": 4156.0,
        "end": 4157.0
    },
    {
        "text": " Se hace me rompió.",
        "start": 4159.0,
        "end": 4160.0
    },
    {
        "text": " Y si inserto acá también tengo problema, cuyo que desplazar todo para insertar una puse de cero.",
        "start": 4160.0,
        "end": 4164.0
    },
    {
        "text": " Entonces, no me sirve.",
        "start": 4164.0,
        "end": 4165.0
    },
    {
        "text": " ¿Qué puedo hacer?",
        "start": 4167.0,
        "end": 4168.0
    },
    {
        "text": " Habledo extremo, inicio y final.",
        "start": 4169.0,
        "end": 4171.0
    },
    {
        "text": " O principio y final.",
        "start": 4172.0,
        "end": 4173.0
    },
    {
        "text": " Al comienzo está bien.",
        "start": 4174.0,
        "end": 4175.0
    },
    {
        "text": " En principio podría ser este la puse un cero y fin la que acá se llama como top.",
        "start": 4176.0,
        "end": 4182.0
    },
    {
        "text": " Pero cuando voy a insertar, sabes que insertan el fin.",
        "start": 4183.0,
        "end": 4185.0
    },
    {
        "text": " O sea, si insertas uno más, el verde nuevo va a venir acá.",
        "start": 4186.0,
        "end": 4189.0
    },
    {
        "text": " Ahora, cuando borras,",
        "start": 4191.0,
        "end": 4192.0
    },
    {
        "text": " que el principio está puesto en cero pasa a la 1.",
        "start": 4193.0,
        "end": 4198.0
    },
    {
        "text": " Solo hace eso.",
        "start": 4200.0,
        "end": 4201.0
    },
    {
        "text": " Es como diciendo ahora, por defecto, el comienzo no es cero pasa a cero 1.",
        "start": 4202.0,
        "end": 4205.0
    },
    {
        "text": " Y si borrar de nuevo, principio va a 2.",
        "start": 4206.0,
        "end": 4208.0
    },
    {
        "text": " Es como piensenlo así.",
        "start": 4209.0,
        "end": 4210.0
    },
    {
        "text": " Lo verde ahora iría de 2 hasta acá.",
        "start": 4211.0,
        "end": 4213.0
    },
    {
        "text": " Y esto como si se hubiera pintado de gris en cero y de 1.",
        "start": 4214.0,
        "end": 4217.0
    },
    {
        "text": " Es como que voy dejando lugares libres.",
        "start": 4218.0,
        "end": 4220.0
    },
    {
        "text": " ¿Te entiende?",
        "start": 4222.0,
        "end": 4223.0
    },
    {
        "text": " Y supongan que ahora digo borredos, o sea que el cero y el 1 son grises.",
        "start": 4224.0,
        "end": 4228.0
    },
    {
        "text": " Es bien.",
        "start": 4229.0,
        "end": 4230.0
    },
    {
        "text": " Y quieren insertar cuatro elementos.",
        "start": 4232.0,
        "end": 4234.0
    },
    {
        "text": " ¿Qué hago? ¿Incerte una acá? ¿Verdé?",
        "start": 4235.0,
        "end": 4236.0
    },
    {
        "text": " Otra acá se pinta de verde, otra acá se pinta de verde y diría que está lleno.",
        "start": 4237.0,
        "end": 4240.0
    },
    {
        "text": " ¿No? ¿Por qué? ¿Por qué?",
        "start": 4242.0,
        "end": 4243.0
    },
    {
        "text": " ¿Qué hago? ¿Dónde la vuelta?",
        "start": 4245.0,
        "end": 4246.0
    },
    {
        "text": " Y uso el que está en el otro lado, pues, en cero.",
        "start": 4248.0,
        "end": 4250.0
    },
    {
        "text": " Lo pinto ahora de barra.",
        "start": 4250.0,
        "end": 4252.0
    },
    {
        "text": " Y si necesito otro más, corro 1.",
        "start": 4253.0,
        "end": 4255.0
    },
    {
        "text": " Es decir, mire como si la reto, como si fuera circular.",
        "start": 4256.0,
        "end": 4258.0
    },
    {
        "text": " Cuando llevo el final, vuelvo al comienzo.",
        "start": 4259.0,
        "end": 4261.0
    },
    {
        "text": " Sí.",
        "start": 4262.0,
        "end": 4263.0
    },
    {
        "text": " Lo voy a mirar circular.",
        "start": 4272.0,
        "end": 4273.0
    },
    {
        "text": " Por eso que mira este dibujito de un arreglo deformado.",
        "start": 4274.0,
        "end": 4276.0
    },
    {
        "text": " Lo digo él así.",
        "start": 4277.0,
        "end": 4279.0
    },
    {
        "text": " Y si no supongan que el principio es cero y el fin es cero.",
        "start": 4280.0,
        "end": 4282.0
    },
    {
        "text": " Entonces, cada vez que insertas, ¿qué lo que vas a hacer?",
        "start": 4283.0,
        "end": 4285.0
    },
    {
        "text": " Sumale una fin e inserta.",
        "start": 4286.0,
        "end": 4287.0
    },
    {
        "text": " Y cuando borras, sumale una principio.",
        "start": 4288.0,
        "end": 4289.0
    },
    {
        "text": " Pero mirado circularmente, ¿qué quiere decir circularmente?",
        "start": 4290.0,
        "end": 4292.0
    },
    {
        "text": " Que cuando llegues al final, volveja la posición cero.",
        "start": 4293.0,
        "end": 4296.0
    },
    {
        "text": " Eso es circular, es un if.",
        "start": 4297.0,
        "end": 4298.0
    },
    {
        "text": " Cuando llegaste al final, volveja el comienzo.",
        "start": 4300.0,
        "end": 4302.0
    },
    {
        "text": " Es decir, es como que cada vez que inserto,",
        "start": 4302.0,
        "end": 4305.0
    },
    {
        "text": " incremento 1 en el sentido de la aguja al reglo, para insertar.",
        "start": 4306.0,
        "end": 4308.0
    },
    {
        "text": " Y cuando borro también, en el sentido de la aguja del reglo,",
        "start": 4309.0,
        "end": 4311.0
    },
    {
        "text": " pero cuando llegue al final, doy la vuelta y sigo acá.",
        "start": 4312.0,
        "end": 4314.0
    },
    {
        "text": " Y si queda el lugar es libre, tienen que estar en el otro extremo.",
        "start": 4316.0,
        "end": 4318.0
    },
    {
        "text": " No pueden estar en otro lado.",
        "start": 4319.0,
        "end": 4320.0
    },
    {
        "text": " Es decir, que los espacios, si hago eso, los espacios ocupados van a ser contiguos",
        "start": 4322.0,
        "end": 4328.0
    },
    {
        "text": " entre principios y fin, que serían los verdes.",
        "start": 4329.0,
        "end": 4331.0
    },
    {
        "text": " Y si el libre también van a ser contiguos, pero si los míos circularmente,",
        "start": 4332.0,
        "end": 4335.0
    },
    {
        "text": " van a haber algunos grises acá y, por ejemplo, algunos grises acá.",
        "start": 4336.0,
        "end": 4338.0
    },
    {
        "text": " Porque doy la vuelta y sigo obris.",
        "start": 4340.0,
        "end": 4341.0
    },
    {
        "text": " Queda más claro cuando no lo mira en esta rueda,",
        "start": 4342.0,
        "end": 4343.0
    },
    {
        "text": " con uniría si borras, correse este y sin zartas, corre este.",
        "start": 4344.0,
        "end": 4347.0
    },
    {
        "text": " Es como que el bloque de los puntitos es lo ocupado.",
        "start": 4349.0,
        "end": 4351.0
    },
    {
        "text": " Buenas.",
        "start": 4352.0,
        "end": 4353.0
    },
    {
        "text": " Y el resto sería lo que tengo libre.",
        "start": 4354.0,
        "end": 4355.0
    },
    {
        "text": " Entonces, la medida que voy borrando, insertando,",
        "start": 4356.0,
        "end": 4358.0
    },
    {
        "text": " voy dando vueltas de esa rueda.",
        "start": 4359.0,
        "end": 4360.0
    },
    {
        "text": " Con lo cual, no tengo que hacer shifteos que me costaba en ordenin,",
        "start": 4361.0,
        "end": 4364.0
    },
    {
        "text": " por ejemplo, para borrar.",
        "start": 4365.0,
        "end": 4366.0
    },
    {
        "text": " Simplemente lo puedo hacer en orden 1.",
        "start": 4367.0,
        "end": 4368.0
    },
    {
        "text": " Me cien.",
        "start": 4369.0,
        "end": 4370.0
    },
    {
        "text": " Qué tan difícil es programar eso.",
        "start": 4371.0,
        "end": 4372.0
    },
    {
        "text": " Se lo dejo planteado.",
        "start": 4377.0,
        "end": 4378.0
    },
    {
        "text": " Pregun, ¿eh?",
        "start": 4380.0,
        "end": 4381.0
    },
    {
        "text": " Para ver cuántos componentes necesitan la representación,",
        "start": 4391.0,
        "end": 4393.0
    },
    {
        "text": " le voy a hacer primera una pregunta.",
        "start": 4394.0,
        "end": 4395.0
    },
    {
        "text": " Un problema que tiene un sistema circular es que se me confunde",
        "start": 4396.0,
        "end": 4401.0
    },
    {
        "text": " cuando di 0 vuelta o una vuelta.",
        "start": 4402.0,
        "end": 4404.0
    },
    {
        "text": " Supongo que ese condigo estaba así o principios y fin valenceros.",
        "start": 4406.0,
        "end": 4409.0
    },
    {
        "text": " Y van a ver que no depende de este valor.",
        "start": 4410.0,
        "end": 4411.0
    },
    {
        "text": " Podría darles 1 y 1 o 0 y 1, no importa.",
        "start": 4412.0,
        "end": 4414.0
    },
    {
        "text": " Si yo inserto, por ejemplo, supongo que la reloj tiene 5 elementos.",
        "start": 4415.0,
        "end": 4419.0
    },
    {
        "text": " Cuando insertan los 5 elementos, insertan el fin y cor, inserto fin y cor,",
        "start": 4420.0,
        "end": 4424.0
    },
    {
        "text": " inserto fin y cor y este vuelve la posición 0,",
        "start": 4425.0,
        "end": 4428.0
    },
    {
        "text": " principios y fin vuelven a valer 0.",
        "start": 4429.0,
        "end": 4430.0
    },
    {
        "text": " Es decir, cuando duro y una vuelta, quedo igual donde estaba.",
        "start": 4431.0,
        "end": 4433.0
    },
    {
        "text": " No informa que eso no pase.",
        "start": 4434.0,
        "end": 4435.0
    },
    {
        "text": " Entonces, la pregunta, ¿cómo distingue con esta vación?",
        "start": 4437.0,
        "end": 4439.0
    },
    {
        "text": " Porque con esta vación principios y fin y en el ancero,",
        "start": 4440.0,
        "end": 4442.0
    },
    {
        "text": " y con esta lleno principios y fin valenceros.",
        "start": 4443.0,
        "end": 4444.0
    },
    {
        "text": " ¿Eh?",
        "start": 4447.0,
        "end": 4448.0
    },
    {
        "text": " Y ¿cómo se si en el arreglo hay un dato cargado o hay una basura?",
        "start": 4449.0,
        "end": 4452.0
    },
    {
        "text": " Supongo que si es un arreglo adentero.",
        "start": 4453.0,
        "end": 4454.0
    },
    {
        "text": " Yo que sé si ¿eh?",
        "start": 4456.0,
        "end": 4457.0
    },
    {
        "text": " La bandera es complicada cuando se te habla true o false.",
        "start": 4460.0,
        "end": 4463.0
    },
    {
        "text": " A ver, se te habla, si no está vacío, es fácil porque cada vez que inserto no está vacío.",
        "start": 4465.0,
        "end": 4469.0
    },
    {
        "text": " Pero cuando borras, ¿cómo se va a decir está vacío?",
        "start": 4470.0,
        "end": 4472.0
    },
    {
        "text": " Hay como más fácil que eso que sería.",
        "start": 4474.0,
        "end": 4476.0
    },
    {
        "text": " Pero aquí hay que revisar porque siempre de nuevo en arreglo algo va a tener, ¿cómo se si es basura o dato?",
        "start": 4479.0,
        "end": 4483.0
    },
    {
        "text": " ¿Cómo se si dice 0 vuelta una vuelta más fácil?",
        "start": 4487.0,
        "end": 4489.0
    },
    {
        "text": " ¿Qué puedo llevar? ¿eh?",
        "start": 4492.0,
        "end": 4493.0
    },
    {
        "text": " No, porque cuando des una vuelta te va a quedar exactamente igual.",
        "start": 4496.0,
        "end": 4498.0
    },
    {
        "text": " Un contador, o sea, si yo voy a la cantidad de elementos.",
        "start": 4499.0,
        "end": 4501.0
    },
    {
        "text": " Entonces, cuando inserté 5 elementos y contaba a les 5 y cuando...",
        "start": 4503.0,
        "end": 4507.0
    },
    {
        "text": " estaba vacío al yacero por eso me di cuenta, no por principios y fin.",
        "start": 4508.0,
        "end": 4511.0
    },
    {
        "text": " No me ayudan para eso.",
        "start": 4512.0,
        "end": 4514.0
    },
    {
        "text": " Porque da una vuelta y queda igual, entonces digo como hago.",
        "start": 4515.0,
        "end": 4517.0
    },
    {
        "text": " Me llegó algo extra como puede ser un contador de elementos.",
        "start": 4518.0,
        "end": 4521.0
    },
    {
        "text": " Entonces, sí, si el contador es igual al máximo está lleno y si el contador es 0 está vacío.",
        "start": 4522.0,
        "end": 4527.0
    },
    {
        "text": " Entonces, una posibilidad en esta pedidosa sería que la representación por ejemplo fuera esta.",
        "start": 4529.0,
        "end": 4536.0
    },
    {
        "text": " Tengo una regla, tengo un principio y un fin, no, dos enteros.",
        "start": 4538.0,
        "end": 4544.0
    },
    {
        "text": " Me llevo la cantidad para distinguir si estaba así o está lleno y me llevo la cota porque cuando yo lo creé le voy a pasar el tamaño máximo de la cola.",
        "start": 4545.0,
        "end": 4553.0
    },
    {
        "text": " Entonces, una regla y cuatro enteros.",
        "start": 4554.0,
        "end": 4556.0
    },
    {
        "text": " Ok, para ir manteniendo este dibujito.",
        "start": 4559.0,
        "end": 4562.0
    },
    {
        "text": " Entonces, crear que lo que hace, bueno, crea la regla, de tamaño cota, principio, fin, cantidad, 0 por ejemplo.",
        "start": 4563.0,
        "end": 4572.0
    },
    {
        "text": " Y qué va a hacer entonces el insertar? ¿Qué dijimos que hacía el insertar?",
        "start": 4574.0,
        "end": 4577.0
    },
    {
        "text": " El insertador es el final.",
        "start": 4578.0,
        "end": 4579.0
    },
    {
        "text": " Precondición que no esté lleno, o sea que haya algún gris.",
        "start": 4580.0,
        "end": 4583.0
    },
    {
        "text": " Entonces, que hace circularmente lo agrega y se corre.",
        "start": 4584.0,
        "end": 4587.0
    },
    {
        "text": " Entonces, podría ser que el código le encolar, fíjense.",
        "start": 4588.0,
        "end": 4591.0
    },
    {
        "text": " Ya que usé la sart, fíjense.",
        "start": 4592.0,
        "end": 4594.0
    },
    {
        "text": " Si no está lleno, hago programación defensiva, inserto el elemento al final y me corro.",
        "start": 4595.0,
        "end": 4603.0
    },
    {
        "text": " Pero cuando me corro, cuando hago fin más más que puede pasar, que llegue al final y tengo que volar el comienzo.",
        "start": 4604.0,
        "end": 4608.0
    },
    {
        "text": " Entonces, eso es un if.",
        "start": 4609.0,
        "end": 4610.0
    },
    {
        "text": " Si se fin, después de incrementarlo, es igual a cota, ahora se fin pasa 0.",
        "start": 4611.0,
        "end": 4614.0
    },
    {
        "text": " Eso es circular, no es más que eso, es un if.",
        "start": 4615.0,
        "end": 4618.0
    },
    {
        "text": " Diciendo que cuando incrementen 1 llegaste al final, volé, diste la vuelta.",
        "start": 4619.0,
        "end": 4622.0
    },
    {
        "text": " Y el desencolar, fíjense, que hace lo mismo, si no estaba así o precondición, corre el principio,",
        "start": 4624.0,
        "end": 4631.0
    },
    {
        "text": " en el sentido de las aguas relos, o sea, el incrementa 1, pero si llega al final, lo vuelve a 0.",
        "start": 4632.0,
        "end": 4636.0
    },
    {
        "text": " Y la resta la candidata.",
        "start": 4637.0,
        "end": 4638.0
    },
    {
        "text": " Entonces, me queda que insertar y desencolar de esta forma ingeniosa la puedas hacer en 1.",
        "start": 4639.0,
        "end": 4643.0
    },
    {
        "text": " En esta estructura circular también sirven muy a menudo, por ejemplo, cuando digo la lista de archivos recientemente modificados de un editor.",
        "start": 4644.0,
        "end": 4652.0
    },
    {
        "text": " Tengo 5 archivos recientemente modificados, me aparece la lista de los 5.",
        "start": 4653.0,
        "end": 4657.0
    },
    {
        "text": " Y voy a modificar un sexto.",
        "start": 4658.0,
        "end": 4659.0
    },
    {
        "text": " ¿Qué va a pasar con esa lista?",
        "start": 4660.0,
        "end": 4661.0
    },
    {
        "text": " ¿Qué les parece que va a hacer un editor?",
        "start": 4663.0,
        "end": 4665.0
    },
    {
        "text": " Me vamos a mostrar 5, pero aquí en el IG.",
        "start": 4666.0,
        "end": 4668.0
    },
    {
        "text": " Aquí en el IG.",
        "start": 4668.0,
        "end": 4669.0
    },
    {
        "text": " Lo último, entonces ¿qué va a hacer? Es como decir, no tenía 5.",
        "start": 4671.0,
        "end": 4674.0
    },
    {
        "text": " Insarte y le pasa por arriba a los viejos.",
        "start": 4675.0,
        "end": 4677.0
    },
    {
        "text": " Como queda una vuelta y sobrecribemos más viejos, entonces se va justamente cuando da vueltas, una estructura fija, siempre insarte, me deja, pero va perdiendo siempre el más viejo.",
        "start": 4678.0,
        "end": 4687.0
    },
    {
        "text": " Porque da la vuelta y le pasa por arriba a la otra.",
        "start": 4688.0,
        "end": 4689.0
    },
    {
        "text": " Entonces, si le usa también mucho para eso.",
        "start": 4690.0,
        "end": 4691.0
    },
    {
        "text": " Cuando quiero que entenan los últimos K, y eso se usa también el delete and delete, el control Z, porque me permite hacer hasta tantos de deshacer o hasta tantos reacer.",
        "start": 4692.0,
        "end": 4701.0
    },
    {
        "text": " ¿Vayan?",
        "start": 4703.0,
        "end": 4704.0
    },
    {
        "text": " Entonces, fíjense que acá chequear si estaba así o está lleno o es fácil, porque es chequear si la cantidad es 0 o si la cantidad es la Cota.",
        "start": 4705.0,
        "end": 4711.0
    },
    {
        "text": " ¿Qué tiene de ventaja esto? ¿Qué todo esto lo puede hacer en orden 1?",
        "start": 4713.0,
        "end": 4715.0
    },
    {
        "text": " Tupo maneje una cola acotada en un sistema computacional sin el riesgo de los casi de los punteros en tiempo constante, esto es muy usada.",
        "start": 4716.0,
        "end": 4725.0
    },
    {
        "text": " Y para ir terminando, aunque me va a hacer un tiempito, bueno, unos 15 a 20 minutos, vamos a ver una aplicación de las colas.",
        "start": 4727.0,
        "end": 4737.0
    },
    {
        "text": " ¿Vaya? Una forma, habíamos visto distintas formas de recorrer árboles, recorral el preorder y norder, posorden, eran recorridos que no llamaba recursivos, porque cuando el árbol no era vacío, lo que vacía era elegir un orden entre estos tres componentes de una revolvinaria no vacía, diciendo bueno, si primero haces este y después recurciamente todos lo llamas preordas.",
        "start": 4738.0,
        "end": 4763.0
    },
    {
        "text": " Si haces primero, cualquiera de todos, después este y el que te quedó, lo llamas inorder y si haces primero los dos recursos y después al final, el nodo, posorden.",
        "start": 4764.0,
        "end": 4776.0
    },
    {
        "text": " Cualquiera de esos tres recorridos al ser recursivo es como que usan implícitamente una estructura de usiliar que es un estáquem, el estáquem es de la máquina.",
        "start": 4777.0,
        "end": 4785.0
    },
    {
        "text": " Vamos a ver que si yo quiero recorrer un árbol, muchas veces también es útil y necesario, depende de la aplicación, recorrerlo por niveles.",
        "start": 4787.0,
        "end": 4796.0
    },
    {
        "text": " Es decir, cuando siete fueron a la revolvinario, primero quiero, si viven primer, hacer algo con este nodo, después con lo que están en el siguiente nivel, el 2 y el 3, después con lo que están en el siguiente nivel, 4, 5, 6 y 7 y después con el 8 y 9.",
        "start": 4797.0,
        "end": 4811.0
    },
    {
        "text": " O sea, ir avanzando como por capas, eso me recorrido por niveles, imprimiendo o haciendo lo que quiera.",
        "start": 4811.0,
        "end": 4817.0
    },
    {
        "text": " Es decir, ejemplos de uso de esto y varios. Supon conceptos son nodos que yo tengo que transmitir en un par en arred o algo así de conexión, que me gustaría y quizás encontrar entre el nodo origen y el nodo de estino, lo más cercano posible al nodo origen, que se cumpla cierta condición.",
        "start": 4818.0,
        "end": 4840.0
    },
    {
        "text": " Se cumpla según eso, voy por niveles, hasta que se cumpla la condición, va a ser el más cercano de raíz.",
        "start": 4840.0,
        "end": 4845.0
    },
    {
        "text": " Si yo es un recorrido recurso tipo el inor de se va a meter lo más que pueda en un camino y si este camino es muy largo, capaz que no se dio cuenta que este nodo 3 ya cumplía la condición, pero no lo encontró hasta en el recorrido del camino del otro.",
        "start": 4846.0,
        "end": 4860.0
    },
    {
        "text": " Lo que me asegura por niveles es que encuentras si estoy buscando algo más cercano a la raíz de forma rápida.",
        "start": 4861.0,
        "end": 4867.0
    },
    {
        "text": " Otro ejemplo no tengo borrado, no? Bueno, no importa acá.",
        "start": 4869.0,
        "end": 4874.0
    },
    {
        "text": " Vieron los juegos, se suele llamar árboles de juegos? No. Un juego lo pongo mira con árbol, hasta la gedre lo pongo con árbol, vamos a dejar un juego simple, tate ti.",
        "start": 4876.0,
        "end": 4888.0
    },
    {
        "text": " El tate ti lo pongo mirar, no? El 3 en raíz o 3 en línea, todo su juego al tate ti. Piensa que es la raíz del árbol, ni si no, a ver.",
        "start": 4889.0,
        "end": 4899.0
    },
    {
        "text": " Una posibilidad es alternar los movimientos de dos jugadores, diciendo bueno va a jugar el jugador redondelito, por ejemplo elige ponerlo acá.",
        "start": 4900.0,
        "end": 4908.0
    },
    {
        "text": " Otra opción de hecho tiene nueve opciones redondelito, diciendo si no fuera ese movimiento que elige, podría saber por ejemplo lo pone acá.",
        "start": 4909.0,
        "end": 4917.0
    },
    {
        "text": " Elige 1 y ahora le toca al otro jugador, por ejemplo diciendo bueno su van a elige este.",
        "start": 4918.0,
        "end": 4924.0
    },
    {
        "text": " Vimos ahora este cuantas opciones va a tener, crucesito, ocho, porque este ya quedó fijo, se le digo bueno, este dejando este acá, podría ser que cruz lo pone acá,",
        "start": 4925.0,
        "end": 4936.0
    },
    {
        "text": " o por ejemplo otra vez esto podría ser que cruz lo pone acá. Y lo mismo, si haciendo lo que sería intercalando el movimiento hasta que uno forma 3 en línea y ganó o llegue un empate,",
        "start": 4936.0,
        "end": 4950.0
    },
    {
        "text": " he dicho está demostrado, si nos dojuen, razonadamente bien, siempre se empate, un juego muy aburrido.",
        "start": 4951.0,
        "end": 4956.0
    },
    {
        "text": " Así que si juegan con un sobrino sobrino, la tienen que desgaganar porque si no siempre se empate.",
        "start": 4957.0,
        "end": 4961.0
    },
    {
        "text": " Entonces, este es un ejemplo de un árbol de juego muy simple porque tiene una altura máxima, cuánto?",
        "start": 4963.0,
        "end": 4968.0
    },
    {
        "text": " 9, porque cada vez que pongo una fichita no la puedo sacar, entonces voy llenando y hay 9 casilleros, ya está.",
        "start": 4971.0,
        "end": 4977.0
    },
    {
        "text": " Muchos cambios sacan lo tanto rápido porque ya llegan a una solución. ¿Qué quiere un juego muchas veces encontrar estrategias ganadoras?",
        "start": 4978.0,
        "end": 4985.0
    },
    {
        "text": " ¿Está bien? Una secuencia de movimiento que me lleve a ganar, si yo soy redonde elito. Esto puede ser también una gedrez pero es más complicado.",
        "start": 4986.0,
        "end": 4995.0
    },
    {
        "text": " Entonces en juego a la gedre el tablo inicial, blanca, negro, ademblado, pieza de distinto valor, alfílto, recavaño, reina, peones y los movimientos posibles son mucho más.",
        "start": 4996.0,
        "end": 5008.0
    },
    {
        "text": " Pero si habla del árbol de juego, todo los movimientos que puede ser y después de ese todo lo que puede ser el otro es un árbol muy grande.",
        "start": 5008.0,
        "end": 5017.0
    },
    {
        "text": " De hecho no lo puedo construir todo porque tiene una característica además de tener mucha más variedad que tiene que la posibilidad de que yo puedo mover fichas y volver a un punto que estaba antes.",
        "start": 5018.0,
        "end": 5028.0
    },
    {
        "text": " Pues me lo puedo encabar y dar unas vuelta y volver a un punto que estaba. Entonces no puedo, pero el déjeme a la gedre para no mezclar tanto.",
        "start": 5028.0,
        "end": 5036.0
    },
    {
        "text": " En la gedres también hay sistemas programas que juegan a la gedres, algunos muy conocidos.",
        "start": 5037.0,
        "end": 5042.0
    },
    {
        "text": " Entonces yo qué podría decir, ¿qué quiere una estrategia ganadora o en la gedre? Es medio difícil pero capaz de quiera una estrategia de 5 movimientos, llegar a un tablo y lo donde yo tengo mejores chance de ganar que el otro.",
        "start": 5043.0,
        "end": 5055.0
    },
    {
        "text": " Y cuento que una reina vale 10 puntos, un caballo vale 7. Entonces quiero que la sumatoria de mis piezas sea mayor que la sumatoria de él.",
        "start": 5055.0,
        "end": 5062.0
    },
    {
        "text": " Entonces digo estoy mejor.",
        "start": 5063.0,
        "end": 5064.0
    },
    {
        "text": " Dame una secuencia de movimiento para que yo haciéndose 5 independientemente de lo que mueve a él, yo que es mejor parado que él.",
        "start": 5065.0,
        "end": 5071.0
    },
    {
        "text": " Y depende de la profundidad con la lija es nivel que me diría principiante experto, si uno dice 10 niveles, 20 niveles, desafío mayor.",
        "start": 5072.0,
        "end": 5080.0
    },
    {
        "text": " Y lo dos puedo hacer más movimientos, yo lo tengo que anticiparse, entiende?",
        "start": 5080.0,
        "end": 5086.0
    },
    {
        "text": " Entonces, ¿qué es lo que uno quiere en esto? También encontrar una secuencia de movimiento lo más cercano a la RAIS que me lleve una situación deseada para mí, que sea ganar o estar mejor parado que el otro.",
        "start": 5087.0,
        "end": 5099.0
    },
    {
        "text": " Entonces quiero ir por niveles viendo todas las opciones y cuál es la mejor.",
        "start": 5100.0,
        "end": 5103.0
    },
    {
        "text": " También construyendo en eso.",
        "start": 5104.0,
        "end": 5106.0
    },
    {
        "text": " Ejemplo, volvamos ahora a nuestro ejemplo extracto el árbol binario.",
        "start": 5107.0,
        "end": 5111.0
    },
    {
        "text": " Pero después le voy a decir como extrapolar esto un árbol general.",
        "start": 5112.0,
        "end": 5117.0
    },
    {
        "text": " ¿Cómo lo recorro por niveles?",
        "start": 5120.0,
        "end": 5122.0
    },
    {
        "text": " Una alternativa que creo que ya habíamos visto como un ejercicio, es decir, a ver, imprimir un nivel de un árbol binario no es difícil.",
        "start": 5123.0,
        "end": 5129.0
    },
    {
        "text": " Un árbol binario y un entero y, que lo que hago, bueno, si el árbol no es vacío y el entero es mayor que cero, hay dos opciones.",
        "start": 5130.0,
        "end": 5138.0
    },
    {
        "text": " Si es uno, imprimo el dato. Y si no es uno, llamo a imprimir nivel con el izquierdo y el derecho restando y en uno.",
        "start": 5139.0,
        "end": 5146.0
    },
    {
        "text": " Es como que voy a chiquando el nivel, hasta que llegue al valor uno, imprimos el nivel.",
        "start": 5147.0,
        "end": 5151.0
    },
    {
        "text": " Yo les dije cuando dije este teórico un ejemplo es como un descontador, en vez de un contador.",
        "start": 5152.0,
        "end": 5158.0
    },
    {
        "text": " Pues restando hasta llegar, el caso va a ser que es uno.",
        "start": 5159.0,
        "end": 5162.0
    },
    {
        "text": " Si o no, se entiende este código, pues este me sirve para imprimir un nivel.",
        "start": 5165.0,
        "end": 5169.0
    },
    {
        "text": " Supongo si yo quiero hacer algo en todos los niveles y yo diría que tendría que hacer igual, algo como esto.",
        "start": 5170.0,
        "end": 5174.0
    },
    {
        "text": " Calcular el altura del árbol, que es el camino de la cantidad de niveles más grande y después hubo a un for, por ejemplo, literando desde uno hasta la altura, llamando para cada valor.",
        "start": 5175.0,
        "end": 5185.0
    },
    {
        "text": " Encaconi, entonces digo primero y uno, imprimir nivel uno, después y dos, el nivel dos y tres y cuatro, hasta que llegue la altura.",
        "start": 5186.0,
        "end": 5193.0
    },
    {
        "text": " Entonces ahí voy viendo que se, de alguna manera se representa esto de primer nivel, el segundo nivel, los distintos I con los cuales voy llamando.",
        "start": 5194.0,
        "end": 5203.0
    },
    {
        "text": " Entiende? Pero este código me va a caer en el cuadrado, porque porque recorrer un nivel, en el peor caso, cuál es el peor caso.",
        "start": 5204.0,
        "end": 5213.0
    },
    {
        "text": " ¿Qué sería el peor caso de recorrer un nivel, imprimir un nivel? Que el nivel sea cuál?",
        "start": 5215.0,
        "end": 5220.0
    },
    {
        "text": " El último, el mejor caso sería que el nivel sea el uno, entonces digo no te me asana.",
        "start": 5221.0,
        "end": 5227.0
    },
    {
        "text": " Entonces como esto es orden N en el peor caso y esto lo voy a llamar muchas veces N pues a la altura N cuadrado.",
        "start": 5228.0,
        "end": 5237.0
    },
    {
        "text": " Entonces quiero hacer los que le dije a la siempre en orden N, no N cuadrado. Recorrer por niveles y no orden N, no N cuadrado.",
        "start": 5238.0,
        "end": 5246.0
    },
    {
        "text": " Pues si no lo voy a poderos a unos juegos en un sistema red, vas a muy lento. Entiende?",
        "start": 5247.0,
        "end": 5252.0
    },
    {
        "text": " Entonces veamos como una cola me puede ayudar. Voy a llevar una cola de árboles, me dice, ¿Pas qué complicado? ¿Qué es un árbol?",
        "start": 5253.0,
        "end": 5264.0
    },
    {
        "text": " No digo, toma el árbol que te doy. Un puntero de árbol.",
        "start": 5264.0,
        "end": 5269.0
    },
    {
        "text": " O sea, es una cola de punteros. Por más que suene complicado árboles puntero de árbol.",
        "start": 5270.0,
        "end": 5276.0
    },
    {
        "text": " Y cuando vas a dibujar acá, voy a poner siempre puntero al nodo de árbol. No voy a dibujar todo el árbol.",
        "start": 5277.0,
        "end": 5281.0
    },
    {
        "text": " Por ejemplo, cuando pongo a inflechita uno, es todo el árbol. Puntero de árbol que es el uno.",
        "start": 5282.0,
        "end": 5288.0
    },
    {
        "text": " ¿Qué voy a hacer para recorrerlo con niveles? En una cola de árboles o de puntero de árbol, voy a arrancar metiendo el árbol que me dijeron.",
        "start": 5289.0,
        "end": 5297.0
    },
    {
        "text": " Quiere recorrerlo con niveles, puntero al nodo uno. Ok? Y ahora voy a empezar a hacer esto.",
        "start": 5298.0,
        "end": 5303.0
    },
    {
        "text": " Aquí le toca el turno, el único que está en la cola. Este. Bueno, el uno. ¿Qué vas a hacer con el uno?",
        "start": 5304.0,
        "end": 5310.0
    },
    {
        "text": " El uno. Imprimila raíz y si tiene sub árboles encolarlos. Es decir, imprimel uno y quién va a encolar.",
        "start": 5310.0,
        "end": 5319.0
    },
    {
        "text": " El puntero al árbol dos y el puntero al árbol tres. ¿Estamos a acuerdo?",
        "start": 5320.0,
        "end": 5324.0
    },
    {
        "text": " En cola el dos y el tres, imprimel uno, ahí en azul y saca.",
        "start": 5326.0,
        "end": 5330.0
    },
    {
        "text": " El que ya procesamos acá. Porque ya está, ¿no? Imprimi su raíz y encolé los dos sub árboles con lo cual este lo saqué.",
        "start": 5331.0,
        "end": 5338.0
    },
    {
        "text": " Y ahora vuelvo a hacerlo mismo. Aquí le toca el turno, no iría. Ahora hay dos. Le toca primero a este que sigo primero de su ponce.",
        "start": 5340.0,
        "end": 5347.0
    },
    {
        "text": " Lo que hago, imprimo el dos y quién colo. Los sub árboles de él. En este caso el cuatro y el cinco.",
        "start": 5348.0,
        "end": 5356.0
    },
    {
        "text": " Pero si es una cola donde van a ir respecto al tres. Atrás. Puede ir a respetar el orden desegado, ¿no?",
        "start": 5356.0,
        "end": 5362.0
    },
    {
        "text": " Entonces imprimel dos, tres, cuatro y cinco. Fíjense ahí que en la cola en este momento hay tres árboles.",
        "start": 5363.0,
        "end": 5370.0
    },
    {
        "text": " Incluso están en dos niveles distintos, esos tres árboles. Porque el tres están en nivel dos, original y el cuatro y el cinco están en nivel tres del árbol original.",
        "start": 5371.0,
        "end": 5380.0
    },
    {
        "text": " Pero quién está primera? El tres que se go primero.",
        "start": 5380.0,
        "end": 5385.0
    },
    {
        "text": " Entonces de alguna manera de esta lógica me va a decir, no va a pasar a un nivel inferior hasta no terminar con el nivel superior.",
        "start": 5386.0,
        "end": 5393.0
    },
    {
        "text": " Ahora va a decir, ¿a quién le toca el turno? Al tres. Imprimilo y encolarlo subaron el si tiene el seis y el siete.",
        "start": 5394.0,
        "end": 5402.0
    },
    {
        "text": " Entonces imprime el tres y encolala el seis y siete pero van al final. Entonces me queda primero cuatro, cinco, seis y después siete.",
        "start": 5402.0,
        "end": 5411.0
    },
    {
        "text": " ¿Qué pasa ahora cuando obtiene el cuatro? ¿Qué lo va a hacer?",
        "start": 5412.0,
        "end": 5416.0
    },
    {
        "text": " Imprimel cuatro y encola el ocho y el nueve. Y van al final, ¿no?",
        "start": 5419.0,
        "end": 5424.0
    },
    {
        "text": " Fíjense de nuevo que en este momento tengo cinco, seis y siete que están acá en cierto nivel.",
        "start": 5424.0,
        "end": 5429.0
    },
    {
        "text": " Oye, ocho y nueve son de otro nivel pero están al final. Tiene que esperar.",
        "start": 5430.0,
        "end": 5434.0
    },
    {
        "text": " Ahora cuando le toca el cinco que va a pasar.",
        "start": 5436.0,
        "end": 5439.0
    },
    {
        "text": " Imprimel cinco y como no tiene sub árboles que pasa no encola. Entonces por subarte empieza a chicarse.",
        "start": 5440.0,
        "end": 5447.0
    },
    {
        "text": " Le toca el seis, imprimel seis no tiene sub árboles, imprimice a chica.",
        "start": 5448.0,
        "end": 5453.0
    },
    {
        "text": " El siete, el ocho, el nueve se acabó, terminó.",
        "start": 5454.0,
        "end": 5458.0
    },
    {
        "text": " Entonces eso permitió ir respetando el orden de llegada porque no pasa, no procesa un nivel hasta no terminar con todo el nivel anterior.",
        "start": 5459.0,
        "end": 5467.0
    },
    {
        "text": " Si no pensan en seducódido, fíjense. A ver si coinciden conmigo quisimos esto.",
        "start": 5469.0,
        "end": 5474.0
    },
    {
        "text": " Para imprimir un árbol binario por niveles que lo quisimos. Primero si el árbol no era vacío lo encolé, o sea metí el uno a prepos.",
        "start": 5475.0,
        "end": 5483.0
    },
    {
        "text": " Ahí arranqué y después qué lo quisimos. Mientras la cola no sea vacía, qué fuimos haciendo paso a paso.",
        "start": 5484.0,
        "end": 5491.0
    },
    {
        "text": " O tuve el primero que le toca el turno, imprimí su raíz y para cada uno de los sub árboles que tenía el izquierdo derecho sin ver en vacío los metí.",
        "start": 5492.0,
        "end": 5501.0
    },
    {
        "text": " Cuando era en vacío no los metí, ahí se chicaba y desencolaba el que ya procesé.",
        "start": 5502.0,
        "end": 5507.0
    },
    {
        "text": " Cuando imprimié el uno, encolé el dos y el tres, el árbol uno se va.",
        "start": 5508.0,
        "end": 5512.0
    },
    {
        "text": " Cuando acuro quisimos eso y al final destruyo la cola está.",
        "start": 5513.0,
        "end": 5518.0
    },
    {
        "text": " Entre este seducódido y el código de la aplicación que hace esto no hay mucha diferencia fíjense.",
        "start": 5519.0,
        "end": 5524.0
    },
    {
        "text": " Este código, este seducódio y esto sería el código de la cola, usando la primitiva de la cola.",
        "start": 5525.0,
        "end": 5530.0
    },
    {
        "text": " ¿Qué hace? Volvamos a leer. Imprimir por niveles, reciben el árbol, crea una cola binaria de árbol es binario vacía.",
        "start": 5531.0,
        "end": 5539.0
    },
    {
        "text": " Si no es vacío lo encola eso hoy hemos dicho, uso el encolar y después decían mientras no sea vacío la cola obtengo el que le toca el turno, el frente o el primero.",
        "start": 5540.0,
        "end": 5551.0
    },
    {
        "text": " Imprimo su dato y si el izquierdo y el derecho de ese árbol no son vacío los encolo.",
        "start": 5552.0,
        "end": 5558.0
    },
    {
        "text": " Cuando hice esto ya desencolo el que ya procesé, se arro el guay, destruyo la cola.",
        "start": 5560.0,
        "end": 5565.0
    },
    {
        "text": " Y la misma longitud que el seducódio. El seducódio del código son prácticamente iguales.",
        "start": 5566.0,
        "end": 5571.0
    },
    {
        "text": " Cuando uno programa con aplicaciones eso es lo deseable, uno piensa una lógica a alto nivel y las primitivas de los módulos de los estados hacen que ese alto nivel sea casi el seducódio que yo pensé.",
        "start": 5572.0,
        "end": 5583.0
    },
    {
        "text": " Entonces la distancia entre el seducódio del código es poca, entonces los errores que puedo cometer son menos.",
        "start": 5584.0,
        "end": 5588.0
    },
    {
        "text": " Si sobre todo uno ya cree que las implementaciones que hizo en esta primera parte del curso de todos los módulos ya son correctas, entonces ya dice, puede dar una lógica a cada de cómo pensé esto pero ya no pienso que el encolar es vacía tan mal.",
        "start": 5589.0,
        "end": 5602.0
    },
    {
        "text": " Ya creo que es también. Entonces ya empiezo ahora a hacer aplicaciones, tiene aplicaciones que usan lo que lo tenía para hacer problemas más interesantes.",
        "start": 5603.0,
        "end": 5612.0
    },
    {
        "text": " Me siguen.",
        "start": 5613.0,
        "end": 5614.0
    },
    {
        "text": " Lo último y con esto nos vamos. Su buen secuestro que ahora el árbol no es binario. Es un árbol general o finitario donde cada uno puede tener un número finito de hijos.",
        "start": 5616.0,
        "end": 5627.0
    },
    {
        "text": " Lo podíamos representar así, ¿no? Si es la raíz tenía cuatro sub árbol lo podíamos poner como primer hijo y todo esto como siguiente hermano, quiere decir que estos en realidad estos cuatro son hijos de este.",
        "start": 5628.0,
        "end": 5641.0
    },
    {
        "text": " ¿Con acuerdo? ¿Sí? Recuerda esa representación. ¿No ya como adapto para imprimir por niveles este árbol? ¿Qué cambia el código que acabo de ver? Para que me impima por niveles este árbol.",
        "start": 5642.0,
        "end": 5656.0
    },
    {
        "text": " Primero nivel uno, después todos los nuevos que están en nivel 2, después todos los nuevos que están en nivel 3, ¿táigual los veo acá?",
        "start": 5656.0,
        "end": 5661.0
    },
    {
        "text": " Entonces ahí sí porque un árbol de juego es finitario, no tiene dos movimientos, pueden tener enemojimientos, una red puede tener enenosos con lo cual se puede conectar. Entonces esto me interesa más.",
        "start": 5662.0,
        "end": 5674.0
    },
    {
        "text": " ¿Sí? ¿Es igual?",
        "start": 5674.0,
        "end": 5681.0
    },
    {
        "text": " dripping?・・",
        "start": 5681.0,
        "end": 5688.0
    },
    {
        "text": " Los estás remdesignando el código. Mirad este código, de decirme, ¿dónde cambia que cambia? Yo no cambia mucho,�",
        "start": 5692.0,
        "end": 5703.0
    },
    {
        "text": " Si no es vacío en col el arbo y general, si,",
        "start": 5703.0,
        "end": 5706.26
    },
    {
        "text": " mientras no sea vacía, voy a hacer algo si,",
        "start": 5706.26,
        "end": 5709.4
    },
    {
        "text": " o tengo el primero si, imprima el dato si,",
        "start": 5709.4,
        "end": 5712.66
    },
    {
        "text": " ¿qué pasa con estos dos if?",
        "start": 5713.68,
        "end": 5716.14
    },
    {
        "text": " ¿Qué estoy preguntando acá en un arbinario comunico oriente?",
        "start": 5716.94,
        "end": 5719.72
    },
    {
        "text": " Estoy diciendo, yo estoy perdonado, no?",
        "start": 5719.72,
        "end": 5722.08
    },
    {
        "text": " Si el izquierdo no vacío, mete el, si el derecho no vacío, mete el,",
        "start": 5722.08,
        "end": 5725.08
    },
    {
        "text": " hago dos preguntas porque sé que hay dos,",
        "start": 5725.08,
        "end": 5727.06
    },
    {
        "text": " a los sumo hay dos, uno puede ser vacía,",
        "start": 5727.06,
        "end": 5729.82
    },
    {
        "text": " y ahora,",
        "start": 5729.82,
        "end": 5730.82
    },
    {
        "text": " ¿qué es la verdad?",
        "start": 5733.0,
        "end": 5735.0
    },
    {
        "text": " ¿Qué es la verdad?",
        "start": 5735.0,
        "end": 5737.0
    },
    {
        "text": " A ver, puede ser, puede ser,",
        "start": 5737.0,
        "end": 5740.0
    },
    {
        "text": " pero no sé si, ahora quiero ir a un nivel más alto,",
        "start": 5740.0,
        "end": 5743.0
    },
    {
        "text": " a ver si lo entendemos, ahí se puede.",
        "start": 5743.0,
        "end": 5745.0
    },
    {
        "text": " Recién, lo que estoy preguntando ahí con esos dos if,",
        "start": 5747.0,
        "end": 5749.0
    },
    {
        "text": " es este, no? Si yo estoy en este,",
        "start": 5749.0,
        "end": 5751.0
    },
    {
        "text": " y estoy perdonado, si es de no vacío, mete lo,",
        "start": 5751.0,
        "end": 5753.0
    },
    {
        "text": " y si es de no vacío, mete lo, si o no.",
        "start": 5753.0,
        "end": 5756.0
    },
    {
        "text": " Ahora la situación,",
        "start": 5756.0,
        "end": 5758.0
    },
    {
        "text": " sería esta, yo tengo este,",
        "start": 5760.0,
        "end": 5762.0
    },
    {
        "text": " y este puede tener varios hijos,",
        "start": 5762.0,
        "end": 5764.0
    },
    {
        "text": " ¿no? Los varios hijos son,",
        "start": 5766.0,
        "end": 5768.0
    },
    {
        "text": " todo esto que después puede seguir para acá.",
        "start": 5769.0,
        "end": 5771.0
    },
    {
        "text": " Entonces, de nuevo, yo ya hice algo con esto,",
        "start": 5772.0,
        "end": 5774.0
    },
    {
        "text": " en vez de preguntar por dos,",
        "start": 5774.0,
        "end": 5775.0
    },
    {
        "text": " diciendo, mete todos los hijos que tenga,",
        "start": 5775.0,
        "end": 5777.0
    },
    {
        "text": " eso lo quiero hacer,",
        "start": 5777.0,
        "end": 5778.0
    },
    {
        "text": " si son dos dos,",
        "start": 5778.0,
        "end": 5779.0
    },
    {
        "text": " son uno, uno, uno, zero, zero,",
        "start": 5779.0,
        "end": 5781.0
    },
    {
        "text": " 25, 25,",
        "start": 5781.0,
        "end": 5782.0
    },
    {
        "text": " esto es que debería hacer,",
        "start": 5783.0,
        "end": 5784.0
    },
    {
        "text": " reemplazar esos dos if,",
        "start": 5784.0,
        "end": 5786.0
    },
    {
        "text": " por, mete los hijos,",
        "start": 5786.0,
        "end": 5787.0
    },
    {
        "text": " ahora, ahora sí voy a lo tuyo,",
        "start": 5788.0,
        "end": 5789.0
    },
    {
        "text": " ¿qué quiere decir mete los hijos de él?",
        "start": 5789.0,
        "end": 5791.0
    },
    {
        "text": " ¿Cómo se cueles son todos los hijos de él?",
        "start": 5793.0,
        "end": 5795.0
    },
    {
        "text": " Voy al primer hijo,",
        "start": 5797.0,
        "end": 5798.0
    },
    {
        "text": " y después todos los otros hijos como los obtengo,",
        "start": 5799.0,
        "end": 5801.0
    },
    {
        "text": " con los hermanos de él.",
        "start": 5802.0,
        "end": 5803.0
    },
    {
        "text": " Es decir, si voy al dibujito,",
        "start": 5805.0,
        "end": 5806.0
    },
    {
        "text": " este que habían visto acá,",
        "start": 5806.0,
        "end": 5807.0
    },
    {
        "text": " por,",
        "start": 5808.0,
        "end": 5809.0
    },
    {
        "text": " todos los hijos de este como lo obtengo,",
        "start": 5811.0,
        "end": 5813.0
    },
    {
        "text": " voy al primero,",
        "start": 5813.0,
        "end": 5814.0
    },
    {
        "text": " y después y tiro,",
        "start": 5814.0,
        "end": 5815.0
    },
    {
        "text": " porque no sé cuantos se llegan a cabardes,",
        "start": 5815.0,
        "end": 5817.0
    },
    {
        "text": " hasta que se acaben.",
        "start": 5817.0,
        "end": 5818.0
    },
    {
        "text": " Son cuatro, serán cuatro,",
        "start": 5819.0,
        "end": 5820.0
    },
    {
        "text": " son 25, son 25,",
        "start": 5820.0,
        "end": 5821.0
    },
    {
        "text": " son 25, no importa,",
        "start": 5821.0,
        "end": 5822.0
    },
    {
        "text": " entonces,",
        "start": 5822.0,
        "end": 5823.0
    },
    {
        "text": " fíjense,",
        "start": 5824.0,
        "end": 5825.0
    },
    {
        "text": " que acá,",
        "start": 5826.0,
        "end": 5827.0
    },
    {
        "text": " esos dos if,",
        "start": 5827.0,
        "end": 5828.0
    },
    {
        "text": " lo reemplazé por este cacho de código,",
        "start": 5828.0,
        "end": 5830.0
    },
    {
        "text": " es un guay,",
        "start": 5830.0,
        "end": 5831.0
    },
    {
        "text": " porque voy al primer hijo,",
        "start": 5832.0,
        "end": 5833.0
    },
    {
        "text": " y mientras tenga,",
        "start": 5834.0,
        "end": 5835.0
    },
    {
        "text": " o sea, mientras no sea vacío, digo,",
        "start": 5835.0,
        "end": 5836.0
    },
    {
        "text": " en colalo,",
        "start": 5836.0,
        "end": 5837.0
    },
    {
        "text": " y avanza al siguiente hermano.",
        "start": 5838.0,
        "end": 5839.0
    },
    {
        "text": " Si este tera 25 veces,",
        "start": 5840.0,
        "end": 5842.0
    },
    {
        "text": " es porque el padre tenía 25 hijos,",
        "start": 5842.0,
        "end": 5844.0
    },
    {
        "text": " está bien,",
        "start": 5844.0,
        "end": 5845.0
    },
    {
        "text": " van colando de uno por vez,",
        "start": 5845.0,
        "end": 5846.0
    },
    {
        "text": " el resto del cuyo es igual,",
        "start": 5846.0,
        "end": 5847.0
    },
    {
        "text": " porque la lógica sigue siendo la misma,",
        "start": 5847.0,
        "end": 5848.0
    },
    {
        "text": " ir por niveles,",
        "start": 5848.0,
        "end": 5849.0
    },
    {
        "text": " usando la cola,",
        "start": 5849.0,
        "end": 5850.0
    },
    {
        "text": " la única cambio es que ahora no tengo dos,",
        "start": 5850.0,
        "end": 5852.0
    },
    {
        "text": " puede tener un número variable,",
        "start": 5852.0,
        "end": 5853.0
    },
    {
        "text": " y eso es un guay.",
        "start": 5853.0,
        "end": 5854.0
    },
    {
        "text": " En vez de hacer dos preguntas,",
        "start": 5856.0,
        "end": 5857.0
    },
    {
        "text": " jarco de Adaz Conif,",
        "start": 5857.0,
        "end": 5858.0
    },
    {
        "text": " ahora un guay.",
        "start": 5858.0,
        "end": 5859.0
    },
    {
        "text": " La lista de hijos como lo obtengo,",
        "start": 5860.0,
        "end": 5862.0
    },
    {
        "text": " como dijo ella,",
        "start": 5862.0,
        "end": 5863.0
    },
    {
        "text": " voy al primero de la lista,",
        "start": 5863.0,
        "end": 5864.0
    },
    {
        "text": " y después voy por los hermanos de ella,",
        "start": 5864.0,
        "end": 5865.0
    },
    {
        "text": " hasta que se acaben.",
        "start": 5865.0,
        "end": 5866.0
    },
    {
        "text": " Eso son todos los hijos de eso,",
        "start": 5866.0,
        "end": 5867.0
    },
    {
        "text": " y con eso,",
        "start": 5868.0,
        "end": 5869.0
    },
    {
        "text": " puedo recorrer por niveles,",
        "start": 5869.0,
        "end": 5871.0
    },
    {
        "text": " una arbol general o finitaria.",
        "start": 5871.0,
        "end": 5872.0
    },
    {
        "text": " Sí?",
        "start": 5875.0,
        "end": 5876.0
    },
    {
        "text": " Y...",
        "start": 5877.0,
        "end": 5878.0
    },
    {
        "text": " ahí, pero me he fetada.",
        "start": 5881.0,
        "end": 5882.0
    },
    {
        "text": " Y con eso,",
        "start": 5884.0,
        "end": 5885.0
    },
    {
        "text": " terminamos por hoy, ¿tá?",
        "start": 5888.0,
        "end": 5890.0
    }
]